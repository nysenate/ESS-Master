/*! ess - v - 2017-05-22 */
var essMyInfo = angular.module("essMyInfo");

essMyInfo.controller("EmpSummaryCtrl", [ "$scope", "$http", "appProps", "EmpInfoApi", "EmpActiveYearsApi", "EmpTransactionsApi", "EmpTransactionCurrentSnapshotApi", "modals", function($scope, $http, appProps, EmpInfoApi, EmpActiveYearsApi, EmpTransactionsApi, EmpTransactionCurrentSnapshotApi, modals) {
    $scope.state = {
        empId: appProps.user.employeeId,
        emp: null
    }, $scope.fetchEmployeeData = function() {
        EmpInfoApi.get({
            empId: $scope.state.empId,
            detail: !0
        }, function(resp) {
            resp.success && ($scope.state.emp = resp.employee), EmpTransactionCurrentSnapshotApi.get({
                empId: $scope.state.empId
            }, function(resp) {
                resp.success && ($scope.state.emp.snapshot = resp.snapshot.items);
            });
        });
    }, $scope.init = function() {
        $scope.fetchEmployeeData();
    }, $scope.init();
} ]);

var essMyInfo = angular.module("essMyInfo");

essMyInfo.controller("EmpTransactionHistoryCtrl", [ "$scope", "$http", "appProps", "$q", "EmpTransactionTimelineApi", "modals", function($scope, $http, appProps, $q, EmpTransactionTimelineApi, modals) {
    $scope.state = {
        empId: appProps.user.employeeId,
        timeline: {}
    }, $scope.getTimeline = function() {
        var deferred = $q.defer();
        return EmpTransactionTimelineApi.get({
            empId: $scope.state.empId
        }, function(resp) {
            if (resp.success && resp.total > 0) {
                var seenTx = {};
                angular.forEach(resp.transactions.reverse(), function(tx) {
                    $scope.state.timeline[tx.effectDate] || ($scope.state.timeline[tx.effectDate] = []), 
                    seenTx[tx.effectDate] || (seenTx[tx.effectDate] = {}), seenTx[tx.effectDate][tx.transCode] || ($scope.state.timeline[tx.effectDate].push(tx), 
                    seenTx[tx.effectDate][tx.transCode] = !0);
                }), seenTx = null;
            } else $scope.state.timeline = !1;
            deferred.resolve();
        }, function(resp) {
            $scope.state.timeline = !1, modals.open("500", {
                details: resp
            }), deferred.reject("Failed to retrieve timeline.");
        }), deferred;
    }, $scope.init = function() {
        $scope.getTimeline();
    }();
} ]);

var essMyInfo = angular.module("essMyInfo");

essMyInfo.filter("payTypeFilter", function() {
    return function(input) {
        switch (input) {
          case "RA":
            return "Regular Annual";

          case "SA":
            return "Special Annual";

          case "TE":
            return "Temporary Payroll";
        }
        return input;
    };
});

var essMyInfo = angular.module("essMyInfo");

essMyInfo.controller("EmpCheckHistoryCtrl", [ "$scope", "$filter", "appProps", "EmpCheckHistoryApi", "EmpActiveYearsApi", "modals", function($scope, $filter, appProps, EmpCheckHistoryApi, EmpActiveYearsApi, modals) {
    function initYtdValues(paychecks) {
        $scope.ytd = angular.extend({}, initialYtd);
        for (var i = 0; i < paychecks.length; i++) {
            var paycheck = paychecks[i];
            $scope.ytd.gross += paycheck.grossIncome, $scope.ytd.directDeposit += paycheck.directDepositAmount, 
            $scope.ytd.check += paycheck.checkAmount;
            for (var key in paycheck.deductions) paycheck.deductions.hasOwnProperty(key) && addDeductionToYtd(paycheck.deductions[key]);
        }
        $scope.ytd.check > 0 && ($scope.checkPresent = !0), $scope.ytd.directDeposit > 0 && ($scope.dirDepositPresent = !0);
    }
    function initDeductionCols(paychecks) {
        var deductionList = [], deductionCodeMap = {};
        angular.forEach(paychecks, function(paycheck) {
            angular.forEach(paycheck.deductions, function(deduction) {
                deduction.code && !deductionCodeMap.hasOwnProperty(deduction.code) && (deductionList.push(deduction), 
                deductionCodeMap[deduction.code] = !0);
            });
        }), $scope.deductionCols = deductionList.sort(function(a, b) {
            return getDeductCodeOrder(a) - getDeductCodeOrder(b);
        }).map(function(deduction) {
            return deduction.description;
        });
    }
    function initDeductionMap(paychecks) {
        for (var i = 0; i < paychecks.length; i++) {
            var checkDeductMap = paychecks[i].deductions;
            for (var key in checkDeductMap) checkDeductMap.hasOwnProperty(key) && addToDeductionSet(checkDeductMap[key]);
        }
    }
    function addToDeductionSet(deduction) {
        $scope.deductionMap.hasOwnProperty(deduction.description) || ($scope.deductionMap[deduction.description] = !0);
    }
    function addDeductionToYtd(deduction) {
        $scope.ytd[deduction.description] ? $scope.ytd[deduction.description] += deduction.amount : $scope.ytd[deduction.description] = deduction.amount;
    }
    function addDeductionsToPaychecks(paychecks) {
        for (var i = 0; i < paychecks.length; i++) for (var deductionKey in $scope.deductionMap) $scope.deductionMap.hasOwnProperty(deductionKey) && (paychecks[i].deductions.hasOwnProperty(deductionKey) || (paychecks[i].deductions[deductionKey] = createEmptyDeduction()));
    }
    function createEmptyDeduction() {
        return {
            amount: 0
        };
    }
    function getDeductCodeOrder(deduction) {
        var order = $scope.deductionCodes.indexOf(deduction.code);
        return order < 0 ? Number.MAX_VALUE : order;
    }
    $scope.deductionMap = {}, $scope.deductionCodes = [ 5, 6, 8, 7, 11, 514, 12, 546, 548, 502, 519, 301, 303, 302, 410, 321, 416, 418, 10, 661, 663, 18, 9, 4, 850, 851, 3, 326, 327, 427, 355, 422, 421, 428, 0 ].map(function(num) {
        return $filter("zeroPad")(num, 3);
    }), $scope.deductionCols = [], $scope.checkHistory = {
        searching: !1,
        useFiscalYears: !1,
        recordYears: null,
        recordFiscalYears: null,
        year: null
    }, $scope.dirDepositPresent = !1, $scope.checkPresent = !1;
    var initialYtd = {
        gross: 0,
        directDeposit: 0,
        check: 0
    };
    $scope.ytd = null, $scope.init = function() {
        $scope.checkHistory.recordYears = appProps.empActiveYears, $scope.checkHistory.year = $scope.checkHistory.recordYears[$scope.checkHistory.recordYears.length - 1], 
        $scope.getRecords(), $scope.getActiveDates();
    }, $scope.getRecords = function() {
        $scope.checkHistory.searching = !0, $scope.paychecks = [];
        var empId = appProps.user.employeeId, params = {
            empId: empId,
            year: $scope.checkHistory.year,
            fiscalYear: $scope.checkHistory.useFiscalYears
        };
        EmpCheckHistoryApi.get(params, function(response) {
            $scope.paychecks = response.paychecks.sort(function(a, b) {
                return new Date(a.checkDate) - new Date(b.checkDate);
            }), initDeductionMap(response.paychecks), addDeductionsToPaychecks(response.paychecks), 
            initYtdValues(response.paychecks), initDeductionCols(response.paychecks), $scope.checkHistory.searching = !1;
        }, function(response) {
            $scope.checkHistory.searching = !1, modals.open("500", {
                details: response
            });
        });
    }, $scope.getActiveDates = function() {
        EmpActiveYearsApi.get({
            empId: appProps.user.employeeId,
            fiscalYear: !0
        }, function(response) {
            $scope.checkHistory.recordFiscalYears = response.activeYears;
        }, function(errorResponse) {
            modals.open("500", {
                details: errorResponse
            });
        });
    }, $scope.onFiscalYearSwitch = function() {
        var yearArray = $scope.checkHistory.useFiscalYears ? $scope.checkHistory.recordFiscalYears : $scope.checkHistory.recordYears;
        $scope.checkHistory.year = yearArray[yearArray.length - 1], $scope.getRecords();
    }, $scope.isSignificantChange = function(curr, previous) {
        return "undefined" != typeof previous && Math.abs(curr - previous) > .03;
    }, $scope.init();
} ]);

var essMyInfo = angular.module("essMyInfo");

essMyInfo.filter("formatDeductionHeader", function() {
    return function(input, scope) {
        if (null !== input) return input.replace(/\w\S*/g, function(txt) {
            return txt = txt.replace(":", ""), txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
    };
});
//# sourceMappingURL=ess-myinfo.min.js.map