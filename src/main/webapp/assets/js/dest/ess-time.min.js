/*! ess - v - 2016-10-26 */
function recordEntryCtrl($scope, $rootScope, $filter, $q, $timeout, appProps, activeRecordsApi, recordSaveApi, accrualPeriodApi, allowanceApi, miscLeaveGrantApi, holidayApi, activeRow, recordUtils, locationService, modals, promiseUtils) {
    function getInitialState() {
        return {
            empId: appProps.user.employeeId,
            miscLeaves: appProps.miscLeaves,
            miscLeaveGrants: null,
            accrual: null,
            allowances: {},
            selectedYear: 0,
            records: [],
            iSelectedRecord: 0,
            salaryRecs: [],
            iSelSalRec: 0,
            tempEntries: !1,
            annualEntries: !1,
            totals: {},
            holidays: null,
            request: {
                records: !1,
                accruals: !1,
                allowances: !1,
                save: !1
            }
        };
    }
    function getAccrualTabIndexFn(propName) {
        return function(entry) {
            return null != entry[propName] && $scope.getSelectedRecord().focused ? 1 : entry.total < 7 && !$scope.isWeekend(entry.date) ? 1 : $scope.isFieldSelected(entry, propName) ? 1 : -1;
        };
    }
    function onRecordChange() {
        var record = $scope.state.records[$scope.state.iSelectedRecord];
        recordUtils.calculateDailyTotals(record), $scope.state.totals = recordUtils.getRecordTotals(record);
    }
    function detectPayTypes() {
        if ($scope.state.tempEntries = $scope.state.annualEntries = !1, $scope.state.records.length > 0) {
            var record = $scope.getSelectedRecord();
            for (var iEntry in record.timeEntries) {
                var entry = record.timeEntries[iEntry];
                isTemporaryEmployee(entry) ? $scope.state.tempEntries = !0 : isSalariedEmployee(entry) && ($scope.state.annualEntries = !0);
            }
        }
    }
    function getSelectedSalaryRecs() {
        var salaryRecs = [];
        if ($scope.state.salaryRecs = salaryRecs, $scope.state.iSelSalRec = 0, $scope.state.tempEntries) {
            var allowance = $scope.state.allowances[$scope.state.selectedYear], record = $scope.getSelectedRecord(), highestRate = 0;
            angular.forEach(allowance.salaryRecs, function(salaryRec) {
                "TE" !== salaryRec.payType || moment(salaryRec.effectDate).isAfter(record.endDate) || moment(record.beginDate).isAfter(salaryRec.endDate) || (salaryRecs.push(salaryRec), 
                salaryRec.salaryRate > highestRate && (highestRate = salaryRec.salaryRate, $scope.state.iSelSalRec = allowance.salaryRecs.indexOf(salaryRec)));
            }), allowance.remainingAllowance = allowance.yearlyAllowance - allowance.moneyUsed, 
            allowance.remainingHours = allowance.remainingAllowance / highestRate, allowance.remainingHours = $filter("round")(allowance.remainingHours, .25, -1), 
            allowance.totalHours = allowance.hoursUsed + allowance.remainingHours;
        }
    }
    function allFalse(object) {
        if ("boolean" == typeof object) return object;
        for (var prop in object) if (object.hasOwnProperty(prop) && allFalse(object[prop])) return !1;
        return !0;
    }
    function setRecordSearchParams() {
        var record = $scope.state.records[$scope.state.iSelectedRecord];
        locationService.setSearchParam("record", record.beginDate);
    }
    function linkRecordFromQueryParam() {
        var recordParam = locationService.getSearchParam("record");
        if (recordParam) for (var iRecord in $scope.state.records) {
            var record = $scope.state.records[iRecord];
            if (record.beginDate === recordParam) {
                $scope.state.iSelectedRecord = parseInt(iRecord);
                break;
            }
        }
    }
    function isTemporaryEmployee(entry) {
        return "TE" === entry.payType;
    }
    function isSalariedEmployee(entry) {
        return "RA" === entry.payType || "SA" === entry.payType;
    }
    function getSubmitDialogs() {
        var submitDialogs = [];
        return $scope.expectedHoursEntered() || submitDialogs.push(function() {
            return modals.open("expectedhrs-dialog", !0);
        }), $scope.futureEndDate() && submitDialogs.push(function() {
            return modals.open("futureenddt-dialog", !0);
        }), submitDialogs;
    }
    function fullValidationCheck() {
        $scope.preValidation();
        var record = $scope.getSelectedRecord(), recordValid = !0;
        return record && record.timeEntries && angular.forEach(record.timeEntries, function(entry) {
            recordValid &= checkEntry(entry);
        }), recordValid;
    }
    function checkEntry(entry) {
        var validationType = isSalariedEmployee(entry) ? "raSa" : "te", entryValid = !0;
        return angular.forEach($scope.entryValidators[validationType], function(validate) {
            entryValid &= validate(entry);
        }), entryValid;
    }
    function checkForPrevUnsubmitted(record) {
        for (var iRecord in $scope.state.records) {
            var otherRecord = $scope.state.records[iRecord];
            if (moment(otherRecord.beginDate).isBefore(record.beginDate)) for (var iEntry in otherRecord.timeEntries) if (isSalariedEmployee(otherRecord.timeEntries[iEntry])) return void ($scope.errorTypes.record.prevUnsubmittedRecord = !0);
        }
    }
    function isEnoughSickTime() {
        var sickTotal = $scope.state.totals.sickEmpHours + $scope.state.totals.sickFamHours;
        return !($scope.state.accrual && sickTotal > $scope.state.accrual.sickAvailable) || ($scope.errorTypes.raSa.notEnoughSickTime = !0, 
        !1);
    }
    function checkRaSaHourIncrements(hours) {
        return !(!isNaN(hours) && hours % 1 % .5 !== 0) || ($scope.errorTypes.raSa.halfHourIncrements = !0, 
        !1);
    }
    function checkTeHourIncrements(hours) {
        return !(!isNaN(hours) && hours % 1 % .25 !== 0) || ($scope.errorTypes.te.fifteenMinIncrements = !0, 
        !1);
    }
    $scope.state = null, $scope.initializeState = function() {
        $scope.state = getInitialState();
    }, $scope.init = function() {
        $scope.initializeState(), $scope.getRecords(), $scope.getMiscLeaveTypeGrants(), 
        $scope.getHolidays();
    }, $scope.$watchGroup([ "state.records", "state.iSelectedRecord" ], function() {
        $scope.state.records && $scope.state.records[$scope.state.iSelectedRecord] && (detectPayTypes(), 
        $q.all([ $scope.getAccrualForSelectedRecord(), $scope.getAllowanceForSelRecord() ]).then(function() {
            getSelectedSalaryRecs(), onRecordChange(), setRecordSearchParams(), fullValidationCheck();
        }));
    }), $scope.getRecords = function() {
        $scope.initializeState(), $scope.state.request.records = !0, activeRecordsApi.get({
            empId: $scope.state.empId,
            scope: "E"
        }, function(response) {
            $scope.state.empId in response.result.items && ($scope.state.records = response.result.items[$scope.state.empId], 
            angular.forEach($scope.state.records, function(record, index) {
                var endDateMoment = moment(record.endDate).add(1, "days").startOf("day");
                record.dueFromNowStr = endDateMoment.fromNow(!1), record.isDue = endDateMoment.isBefore(moment()), 
                record.index = index, angular.forEach(record.timeEntries, function(entry, i) {
                    entry.index = i;
                }), record.initialRemarks = record.remarks;
            }), linkRecordFromQueryParam());
        }, function(response) {
            modals.open("500", {
                action: "get active records",
                details: response
            });
        }).$promise.finally(function() {
            $scope.state.request.records = !1;
        });
    }, $scope.saveRecord = function(submit) {
        var record = $scope.state.records[$scope.state.iSelectedRecord];
        fullValidationCheck();
        var entryErrors = $scope.selRecordHasEntryErrors();
        if (entryErrors || submit && $scope.selRecordHasRecordErrors()) $scope.$broadcast("validateRecordEntries"); else if (submit) {
            var modalDialogs = getSubmitDialogs();
            promiseUtils.serial(modalDialogs).then(function() {
                return modals.open("submit-ack", {
                    record: record
                }, !0);
            }).then($scope.submitRecord).then(function() {
                return modals.open("post-save", {}, !0);
            }).then($scope.logout, $scope.init);
        } else modals.open("save-indicator", {
            record: record
        }).then($scope.init), $scope.state.request.save = !0, recordSaveApi.save({
            action: "save"
        }, record, function(resp) {
            record.updateDate = moment().format("YYYY-MM-DDTHH:mm:ss.SSS"), record.savedDate = record.updateDate, 
            record.dirty = !1;
        }, function(resp) {
            modals.reject(), modals.open("500", {
                details: resp
            });
        }).$promise.finally(function() {
            $scope.state.request.save = !1;
        });
    }, $scope.submitRecord = function() {
        var record = $scope.state.records[$scope.state.iSelectedRecord];
        return modals.open("submit-progress"), recordSaveApi.save({
            action: "submit"
        }, record, function(resp) {
            modals.resolve();
        }, function(resp) {
            modals.reject(), modals.open("500", {
                details: resp
            });
        }).$promise.finally(function() {
            $scope.state.request.save = !1;
        });
    }, $scope.getAccrualForSelectedRecord = function() {
        if ($scope.state.annualEntries) {
            var empId = $scope.state.empId, record = $scope.state.records[$scope.state.iSelectedRecord], periodStartMoment = moment(record.payPeriod.startDate);
            return $scope.state.request.accruals = !0, accrualPeriodApi.get({
                empId: empId,
                beforeDate: periodStartMoment.format("YYYY-MM-DD")
            }, function(resp) {
                resp.success && ($scope.state.accrual = resp.result);
            }, function(resp) {
                modals.open("500", {
                    details: resp
                });
            }).$promise.finally(function() {
                $scope.state.request.accruals = !1;
            });
        }
        return $q(function(resolve) {
            resolve();
        });
    }, $scope.getAllowanceForSelRecord = function() {
        var record = $scope.getSelectedRecord();
        if ($scope.state.selectedYear = moment(record.beginDate).year(), $scope.state.tempEntries && !$scope.state.allowances.hasOwnProperty($scope.state.selectedYear)) {
            var params = {
                empId: $scope.state.empId,
                year: $scope.state.selectedYear
            };
            return $scope.state.request.allowances = !0, allowanceApi.get(params, function(response) {
                for (var i in response.result) {
                    var allowance = response.result[i];
                    $scope.state.allowances[allowance.year] = allowance;
                }
            }, function(resp) {
                modals.open("500", {
                    details: resp
                });
            }).$promise.finally(function() {
                $scope.state.request.allowances = !1;
            });
        }
        return $q(function(resolve) {
            resolve();
        });
    }, $scope.getMiscLeaveTypeGrants = function() {
        var params = {
            empId: $scope.state.empId
        };
        miscLeaveGrantApi.get(params, function(response) {
            $scope.state.miscLeaveGrants = response.result;
        }, function(response) {
            modals.open("500", {
                details: response
            });
        });
    }, $scope.getHolidays = function() {
        var params = {
            fromDate: moment().subtract(1, "year").format("YYYY-MM-DD"),
            toDate: moment().add(1, "year").format("YYYY-MM-DD")
        };
        holidayApi.get(params, function(response) {
            $scope.state.holidays = {}, angular.forEach(response.holidays, function(holiday) {
                holiday.unofficial || ($scope.state.holidays[holiday.date] = holiday);
            });
        }, function(response) {
            modals.open("500", {
                details: response
            });
        });
    }, $scope.getSelectedRecord = function() {
        return $scope.state.records[$scope.state.iSelectedRecord];
    }, $scope.resolveModal = function(result) {
        modals.resolve(result);
    }, $scope.rejectModal = function(reason) {
        modals.reject(reason);
    }, $scope.isWeekend = function(date) {
        return $filter("momentIsDOW")(date, [ 0, 6 ]);
    }, $scope.setDirty = function(entry) {
        $scope.state.records[$scope.state.iSelectedRecord].dirty = !0, entry && (entry.dirty = !0), 
        onRecordChange();
    }, $scope.recordValid = function() {
        var record = $scope.getSelectedRecord();
        return !(null == record || $scope.selRecordHasEntryErrors());
    }, $scope.recordSubmittable = function() {
        var record = $scope.getSelectedRecord();
        return $scope.recordValid() && !$scope.selRecordHasRecordErrors() && !moment(record.beginDate).isAfter(moment(), "day");
    }, $scope.getAvailableHours = function() {
        var allowance = $scope.state.allowances[$scope.state.selectedYear], tempWorkHours = $scope.state.totals.tempWorkHours;
        if (allowance && !isNaN(tempWorkHours)) return allowance.remainingHours - tempWorkHours;
    }, $scope.getSalRecDateRange = function(salaryRec) {
        var record = $scope.getSelectedRecord(), beginDate = moment(salaryRec.effectDate).isAfter(record.beginDate) ? salaryRec.effectDate : record.beginDate, endDate = moment(salaryRec.endDate).isAfter(record.endDate) ? record.endDate : salaryRec.endDate;
        return moment(beginDate).format("M/D") + " - " + moment(endDate).format("M/D");
    }, $scope.getSalRecStartDate = function(salaryRec) {
        var record = $scope.getSelectedRecord();
        return moment(salaryRec.effectDate).isAfter(record.beginDate) ? salaryRec.effectDate : record.beginDate;
    }, $scope.getSalRecEndDate = function(salaryRec) {
        var record = $scope.getSelectedRecord();
        return moment(salaryRec.endDate).isAfter(record.endDate) ? record.endDate : salaryRec.endDate;
    }, $scope.getRecordRangeDisplay = function(record) {
        return moment(record.beginDate).format("l") + " - " + moment(record.endDate).format("l");
    }, $rootScope.$on("validateRecordEntries", function() {
        var record = $scope.getSelectedRecord();
        record.focused = !0;
    }), $scope.isFieldSelected = function(entry, fieldName) {
        var fieldIdSelector = "#" + entry.date + "-" + fieldName;
        return angular.element(fieldIdSelector).is(":focus");
    }, $scope.accrualTabIndex = {
        holiday: getAccrualTabIndexFn("holidayHours"),
        vacation: getAccrualTabIndexFn("vacationHours"),
        personal: getAccrualTabIndexFn("personalHours"),
        sickEmp: getAccrualTabIndexFn("sickEmpHours"),
        sickFam: getAccrualTabIndexFn("sickFamHours"),
        misc: getAccrualTabIndexFn("miscHours")
    }, $scope.expectedHoursEntered = function() {
        return !$scope.state.annualEntries || $scope.state.accrual.biWeekHrsExpected <= $scope.state.totals.raSaTotal;
    }, $scope.futureEndDate = function() {
        var record = $scope.getSelectedRecord();
        if (moment(record.endDate).isAfter(moment(), "day")) return !0;
    }, $scope.getMiscLeavePredicate = function(date) {
        var dateMoment = moment(date);
        return function(miscLeave) {
            if (miscLeave.restricted === !1) return !0;
            for (var iGrant in $scope.state.miscLeaveGrants) {
                var grant = $scope.state.miscLeaveGrants[iGrant];
                if (!dateMoment.isBefore(grant.beginDate, "day") && !dateMoment.isAfter(grant.endDate, "day") && miscLeave.type === grant.miscLeaveType) return !0;
            }
            return !1;
        };
    }, $scope.isHoliday = function(entry) {
        return $scope.state.holidays && $scope.state.holidays.hasOwnProperty(entry.date);
    }, $scope.getHolidayHours = function(entry) {
        return $scope.state.holidays ? $scope.isHoliday(entry) ? $scope.state.holidays[entry.date].hours : 0 : 7;
    }, $scope.preValidation = function() {
        var record = $scope.getSelectedRecord();
        $scope.errorTypes.reset(), checkForPrevUnsubmitted(record);
    }, $scope.errorTypes = {
        raSa: {
            workHoursInvalidRange: !1,
            holidayHoursInvalidRange: !1,
            vacationHoursInvalidRange: !1,
            personalHoursInvalidRange: !1,
            empSickHoursInvalidRange: !1,
            famSickHoursInvalidRange: !1,
            miscHoursInvalidRange: !1,
            totalHoursInvalidRange: !1,
            notEnoughVacationTime: !1,
            notEnoughPersonalTime: !1,
            notEnoughSickTime: !1,
            noMiscTypeGiven: !1,
            noMiscHoursGiven: !1,
            halfHourIncrements: !1
        },
        te: {
            workHoursInvalidRange: !1,
            notEnoughWorkHours: !1,
            noComment: !1,
            noWorkHoursForComment: !1,
            fifteenMinIncrements: !1
        },
        record: {
            prevUnsubmittedRecord: !1
        },
        reset: function(object) {
            void 0 === object && (object = this);
            var caller = this;
            angular.forEach(object, function(value, key) {
                "boolean" == typeof value ? object[key] = !1 : "object" == typeof value && caller.reset(value);
            });
        }
    }, $scope.selRecordHasEntryErrors = function() {
        return $scope.selRecordHasRaSaErrors() || $scope.selRecordHasTeErrors();
    }, $scope.selRecordHasRaSaErrors = function() {
        return !allFalse($scope.errorTypes.raSa);
    }, $scope.selRecordHasTeErrors = function() {
        return !allFalse($scope.errorTypes.te);
    }, $scope.selRecordHasRecordErrors = function() {
        return !allFalse($scope.errorTypes.record);
    }, $scope.entryValidators = {
        raSa: {
            workHours: function(entry) {
                var hrs = entry.workHours;
                if (0 === hrs || null === hrs) return !0;
                var isValid = !0;
                return "undefined" == typeof hrs && ($scope.errorTypes.raSa.workHoursInvalidRange = !0, 
                isValid = !1), isValid &= checkRaSaHourIncrements(hrs);
            },
            holidayHours: function(entry) {
                if ("SA" !== entry.payType || !$scope.state.holidays || !$scope.isHoliday(entry)) return !0;
                var hrs = entry.holidayHours, isValid = !0;
                return 0 === hrs || null === hrs || ("undefined" == typeof hrs && ($scope.errorTypes.raSa.holidayHoursInvalidRange = !0, 
                isValid = !1), isValid &= checkRaSaHourIncrements(hrs));
            },
            vacationHours: function(entry) {
                var hrs = entry.vacationHours, isValid = !0;
                return 0 === hrs || null === hrs || ($scope.state.accrual && $scope.state.totals.vacationHours > $scope.state.accrual.vacationAvailable && ($scope.errorTypes.raSa.notEnoughVacationTime = !0, 
                isValid = !1), "undefined" == typeof hrs && ($scope.errorTypes.raSa.vacationHoursInvalidRange = !0, 
                isValid = !1), isValid &= checkRaSaHourIncrements(hrs));
            },
            personalHours: function(entry) {
                var hrs = entry.personalHours, isValid = !0;
                return 0 === hrs || null === hrs || ($scope.state.accrual && $scope.state.totals.personalHours > $scope.state.accrual.personalAvailable && ($scope.errorTypes.raSa.notEnoughPersonalTime = !0, 
                isValid = !1), "undefined" == typeof hrs && ($scope.errorTypes.raSa.personalHoursInvalidRange = !0, 
                isValid = !1), isValid &= checkRaSaHourIncrements(hrs));
            },
            sickEmpHours: function(entry) {
                var hrs = entry.sickEmpHours, isValid = !0;
                return 0 === hrs || null === hrs || (isValid &= isEnoughSickTime(), "undefined" == typeof hrs && ($scope.errorTypes.raSa.empSickHoursInvalidRange = !0, 
                isValid = !1), isValid &= checkRaSaHourIncrements(hrs));
            },
            sickFamHours: function(entry) {
                var hrs = entry.sickFamHours, isValid = !0;
                return 0 === hrs || null === hrs || (isValid &= isEnoughSickTime(), "undefined" == typeof hrs && ($scope.errorTypes.raSa.famSickHoursInvalidRange = !0, 
                isValid = !1), isValid &= checkRaSaHourIncrements(hrs));
            },
            miscHours: function(entry) {
                var hrs = entry.miscHours, isValid = !0;
                return 0 === hrs || null === hrs || ("undefined" == typeof hrs && ($scope.errorTypes.raSa.miscHoursInvalidRange = !0, 
                isValid = !1), isValid &= checkRaSaHourIncrements(hrs));
            },
            miscType: function(entry) {
                var miscTypePresent = null !== entry.miscType, miscHoursPresent = entry.miscHours > 0, isActiveRow = entry.index === activeRow.getActiveRow();
                return isActiveRow || miscTypePresent || !miscHoursPresent ? !(miscTypePresent && !miscHoursPresent) || ($scope.errorTypes.raSa.noMiscHoursGiven = !0, 
                !1) : ($scope.errorTypes.raSa.noMiscTypeGiven = !0, !1);
            },
            totalHours: function(entry) {
                return !!(isNaN(entry.total) || entry.total >= 0 && entry.total <= 24) || ($scope.errorTypes.raSa.totalHoursInvalidRange = !0, 
                !1);
            }
        },
        te: {
            workHours: function(entry) {
                var hrs = entry.workHours;
                if (0 === hrs || null === hrs) return !0;
                var isValid = !0;
                return "undefined" == typeof hrs && ($scope.errorTypes.te.workHoursInvalidRange = !0, 
                isValid = !1), isValid &= checkTeHourIncrements(hrs);
            },
            comment: function(entry) {
                var hrs = entry.workHours, comment = entry.empComment, isActiveRow = entry.index === activeRow.getActiveRow();
                return hrs > 0 && !comment && !isActiveRow ? ($scope.errorTypes.te.noComment = !0, 
                !1) : null !== hrs || !comment || ($scope.errorTypes.te.noWorkHoursForComment = !0, 
                !1);
            }
        }
    }, $scope.init();
}

function recordHistoryCtrl($scope, $q, appProps, ActiveYearsTimeRecordsApi, timeRecordsApi, attendanceRecordApi, modals, recordUtils) {
    function initializeTimeRecords() {
        var responseRecords = $scope.state.timesheetRecords;
        for (var i in responseRecords) {
            var record = responseRecords[i];
            recordUtils.calculateDailyTotals(record), record.totals = recordUtils.getRecordTotals(record), 
            "E" === record.scope ? $scope.records.employee.push(record) : (addToAnnualTotals(record), 
            $scope.records.other.unshift(record));
        }
    }
    function initializeAttendRecords() {
        var attendRecords = $scope.state.attendRecords, recordArray = $scope.records.other;
        $scope.state.paperTimesheetsDisplayed = !1, attendRecords.map(recordUtils.formatAttendRecord).filter(useAttendRecord).forEach(function(attendRec) {
            addToAnnualTotals(attendRec), recordArray.unshift(attendRec), $scope.state.paperTimesheetsDisplayed = !0;
        });
    }
    function useAttendRecord(attendRec) {
        if (!attendRec.paperTimesheet) return !1;
        var timeRecords = $scope.state.timesheetRecords;
        for (var iTrec in timeRecords) if (timeRecords.hasOwnProperty(iTrec)) {
            var timeRec = timeRecords[iTrec];
            if (attendRec.beginDate === timeRec.beginDate && attendRec.endDate === timeRec.endDate) return !1;
        }
        return !0;
    }
    function addToAnnualTotals(record) {
        for (var field in record.totals) record.totals.hasOwnProperty(field) && ($scope.annualTotals.hasOwnProperty(field) || ($scope.annualTotals[field] = 0), 
        $scope.annualTotals[field] += record.totals[field]);
    }
    $scope.state = {
        searching: !1,
        recordYears: null,
        year: null,
        timeRecords: [],
        attendRecords: []
    }, $scope.init = function() {
        var empId = appProps.user.employeeId;
        ActiveYearsTimeRecordsApi.get({
            empId: empId
        }, function(resp) {
            $scope.state.recordYears = resp.years.reverse(), $scope.state.year = $scope.state.recordYears[0], 
            $scope.getRecords();
        }, function(resp) {
            modals.open("500", {
                action: "Get time record history",
                details: resp
            });
        });
    }, $scope.floatTheadOpts = {
        scrollingTop: 47
    }, $scope.getRecords = function() {
        $scope.state.searching = !0, $scope.records = {
            employee: [],
            other: []
        }, $scope.annualTotals = {}, $q.all([ $scope.getTimeRecords(), $scope.getAttendRecords() ]).then(function() {}).catch(function(reason) {}).finally(function() {
            $scope.state.searching = !1, initializeTimeRecords(), initializeAttendRecords(), 
            $scope.records.other.sort(recordUtils.compareRecords).reverse();
        });
    }, $scope.getTimeRecords = function() {
        var empId = appProps.user.employeeId, now = moment(), params = {
            empId: empId,
            from: $scope.state.year.toString() + "-01-01",
            to: $scope.state.year < now.year() ? $scope.state.year.toString() + "-12-31" : now.format("YYYY-MM-DD")
        };
        return timeRecordsApi.get(params, function(response) {
            $scope.state.timesheetRecords = response.result.items[empId];
        }, function(response) {
            modals.open("500", {
                details: response
            });
        }).$promise;
    }, $scope.getAttendRecords = function() {
        var params = {
            empId: appProps.user.employeeId,
            year: $scope.state.year
        };
        return attendanceRecordApi.get(params, function(response) {
            $scope.state.attendRecords = response.records;
        }, function(errorResponse) {
            modals.open("500", {
                details: errorResponse
            });
        }).$promise;
    }, $scope.showDetails = function(record) {
        if (!record.paperTimesheet) {
            var params = {
                record: record
            };
            modals.open("record-details", params, !0);
        }
    }, $scope.init();
}

function recordManageCtrl($scope, $q, appProps, recordUtils, modals, badgeService, supRecordsApi, timeRecordsApi, reminderApi) {
    function setDefaultValues() {
        $scope.state.selSupId = allSupervisorsId, $scope.state.supIds = [ allSupervisorsId ], 
        $scope.state.empInfos = {}, $scope.state.supRecords = {};
    }
    function getEmployeeActiveRecords() {
        $scope.state.loading = !0, setDefaultValues();
        var from = moment().subtract(1, "year").format("YYYY-MM-DD"), to = moment().format("YYYY-MM-DD"), empId = appProps.user.employeeId;
        supRecordsApi.get({
            supId: empId,
            from: from,
            to: to
        }, function(resp) {
            initializeRecords(resp.result.items), updateRecordsPendingBadge(), resetSelection(), 
            $scope.state.loading = !1;
        }, function(resp) {
            $scope.state.loading = !1, modals.open("500", {
                details: resp
            });
        });
    }
    function updateRecordsPendingBadge() {
        var submitted = $scope.state.supRecords[allSupervisorsId].SUBMITTED ? $scope.state.supRecords[allSupervisorsId].SUBMITTED.length : 0;
        badgeService.setBadgeValue("pendingRecordCount", submitted);
    }
    function submitRecords(records) {
        var promises = [];
        return records.forEach(function(record) {
            promises.push(timeRecordsApi.save({
                action: record.action
            }, record, function(response) {}, function(response) {
                return response;
            }).$promise);
        }), $scope.state.loading = !0, $q.all(promises).then(function() {
            getEmployeeActiveRecords();
        }, function(resp) {
            $scope.state.loading = !1, modals.open("500", {
                details: resp
            });
        });
    }
    function postReminders(timeRecords) {
        if (!timeRecords) return $q.when();
        var empIds = [], beginDates = [];
        return timeRecords.forEach(function(record) {
            empIds.push(record.employeeId), beginDates.push(record.beginDate);
        }), modals.open("record-reminder-posting"), reminderApi.save({
            empId: empIds,
            beginDate: beginDates
        }, {}, function() {}, function(errorData) {
            modals.rejectAll(), modals.open("500", errorData);
        }).$promise.finally(modals.resolve);
    }
    function initializeRecords(recordMap) {
        var allRecords = $scope.state.supRecords[allSupervisorsId] = {};
        angular.forEach(recordMap, function(records, empId) {
            angular.forEach(records, function(record) {
                recordUtils.calculateDailyTotals(record), record.totals = recordUtils.getRecordTotals(record);
                var currSupId = record.supervisorId, supIdList = $scope.state.supIds;
                supIdList.indexOf(currSupId) == -1 && ($scope.state.supIds.push(currSupId), $scope.state.empInfos[currSupId] = record.supervisor);
                var currSupRecords = $scope.state.supRecords[currSupId] = $scope.state.supRecords[currSupId] || {}, statusList = currSupRecords[record.recordStatus] = currSupRecords[record.recordStatus] || [], allStatusList = allRecords[record.recordStatus] = allRecords[record.recordStatus] || [];
                statusList.push(record), allStatusList.push(record);
            });
        });
    }
    function getSelectedRecords(status) {
        var selectedRecords = [];
        for (var index in $scope.state.selectedIndices[status]) $scope.state.selectedIndices[status].hasOwnProperty(index) && selectedRecords.push($scope.state.supRecords[$scope.state.selSupId][status][index]);
        return selectedRecords;
    }
    function submitReviewedRecords(reviewedRecords) {
        var recordsToSubmit = [];
        angular.forEach(reviewedRecords.approved, function(record) {
            record.action = "submit", recordsToSubmit.push(record);
        }), angular.forEach(reviewedRecords.disapproved, function(record) {
            record.action = "reject", record.remarks = record.rejectionRemarks, recordsToSubmit.push(record);
        }), recordsToSubmit.length > 0 && submitRecords(recordsToSubmit);
    }
    function resetSelection() {
        angular.forEach($scope.state.selectedIndices, function(selections, status) {
            $scope.selectNone(status);
        });
    }
    $scope.state = {
        supIds: {},
        empInfos: {},
        supRecords: {},
        loading: !1,
        selSupId: null,
        selectedIndices: {
            NOT_SUBMITTED: {},
            SUBMITTED: {},
            DISAPPROVED: {},
            APPROVED: {},
            DISAPPROVED_PERSONNEL: {},
            SUBMITTED_PERSONNEL: {},
            APPROVED_PERSONNEL: {}
        }
    };
    var allSupervisorsId = "all";
    $scope.init = function() {
        getEmployeeActiveRecords();
    }, $scope.getOptionLabel = function(supId) {
        return (supId == allSupervisorsId ? "All Supervisors" : $scope.state.empInfos[supId].fullName) + " - (" + ($scope.state.supRecords[supId].SUBMITTED || []).length + " Pending Records)";
    }, $scope.multipleSups = function() {
        return Object.keys($scope.state.supRecords).length > 2;
    }, $scope.selectAll = function(status) {
        for (var i = 0; i < $scope.state.supRecords[$scope.state.selSupId][status].length; i++) $scope.state.selectedIndices[status][i] = !0;
    }, $scope.selectNone = function(status) {
        $scope.state.selectedIndices[status] = {};
    }, $scope.showDetails = function(record) {
        var params = {
            record: record
        };
        modals.open("record-details", params, !0);
    }, $scope.review = function(status, allowApproval) {
        var selectedRecords = getSelectedRecords(status), params = {
            records: selectedRecords,
            allowApproval: allowApproval
        };
        modals.open("record-review", params, !0).then(submitReviewedRecords).then($scope.selectNone);
    }, $scope.hasSelections = function(status) {
        for (var p in $scope.state.selectedIndices[status]) if ($scope.state.selectedIndices[status].hasOwnProperty(p) && $scope.state.selectedIndices[status][p] === !0) return !0;
        return !1;
    }, $scope.submitPrompt = function(records) {
        var params = {
            approved: records
        };
        return modals.open("record-approval-submit", params);
    }, $scope.approveSelections = function() {
        var selectedRecords = getSelectedRecords("SUBMITTED");
        selectedRecords && (selectedRecords.forEach(function(record) {
            record.action = "submit";
        }), $scope.submitPrompt(selectedRecords).then(function() {
            submitRecords(selectedRecords);
        }));
    }, $scope.remindSelections = function(status) {
        var selectedRecords = getSelectedRecords(status);
        modals.open("record-reminder-prompt", {
            records: selectedRecords
        }, !0).then(function() {
            return postReminders(selectedRecords);
        }).then(function() {
            modals.open("record-reminder-posted", !0);
        });
    }, $scope.resolveModal = modals.resolve, $scope.init();
}

function recordReviewModal(appProps, modals, locationService) {
    function link($scope, $elem, $attrs) {
        function selectNextPendingRecord() {
            for (var i = 0; i < $scope.records.length; i++) {
                var iAdj = (i + $scope.iSelectedRecord) % $scope.records.length;
                if ("untouched" === $scope.getApprovalStatus($scope.records[iAdj])) return $scope.iSelectedRecord = iAdj, 
                void locationService.scrollToId($scope.records[iAdj].timeRecordId);
            }
        }
        function selectNextRecord() {
            var nextIndex = $scope.iSelectedRecord + 1;
            nextIndex < $scope.records.length && ($scope.iSelectedRecord = nextIndex);
        }
        function selectPreviousRecord() {
            var previousIndex = $scope.iSelectedRecord - 1;
            previousIndex >= 0 && ($scope.iSelectedRecord = previousIndex);
        }
        function onKeydown(e) {
            if ([ 38, 39 ].indexOf(e.keyCode) >= 0) selectPreviousRecord(); else {
                if (!([ 40, 41 ].indexOf(e.keyCode) >= 0)) return;
                selectNextRecord();
            }
            $scope.$digest();
        }
        $scope.iSelectedRecord = 0, $scope.records = modals.params().records, $scope.allowApproval = modals.params().allowApproval;
        var approved = {}, disapproved = {};
        $elem.addClass("custom-fit"), $scope.submitChanges = function() {
            modals.open("record-approval-submit", {
                approved: approved,
                disapproved: disapproved
            }).then(function() {
                $scope.resolve();
            });
        }, $scope.resolve = function() {
            modals.resolve({
                approved: approved,
                disapproved: disapproved
            });
        }, $scope.close = modals.reject, $scope.cancelRecord = function() {
            var record = $scope.records[$scope.iSelectedRecord];
            delete approved[record.timeRecordId], delete disapproved[record.timeRecordId];
        }, $scope.approveRecord = function() {
            var record = $scope.records[$scope.iSelectedRecord];
            $scope.cancelRecord(), approved[record.timeRecordId] = record, selectNextPendingRecord();
        }, $scope.rejectRecord = function() {
            var record = $scope.records[$scope.iSelectedRecord];
            modals.open("record-review-reject", {
                record: record
            }, !0).then(function(reasons) {
                $scope.cancelRecord(record), record.rejectionRemarks = reasons, disapproved[record.timeRecordId] = record, 
                selectNextPendingRecord();
            });
        }, $scope.selectRecord = function(index) {
            $scope.iSelectedRecord = index;
        }, $scope.next = function() {
            selectNextPendingRecord();
        }, $scope.getApprovalStatus = function(record) {
            return record.timeRecordId in approved ? "approved" : record.timeRecordId in disapproved ? "disapproved" : "untouched";
        }, $scope.submissionEmpty = function() {
            return 0 === Object.keys(approved).length && 0 === Object.keys(disapproved).length;
        };
        var $doc = angular.element(document);
        $doc.on("keydown", onKeydown), $scope.$on("$destroy", function() {
            $doc.off("keydown", onKeydown);
        });
    }
    return {
        templateUrl: appProps.ctxPath + "/template/time/record/record-review-modal",
        link: link
    };
}

function recordReviewRejectModal(modals, appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/time/record/record-reject-modal",
        link: function($scope, $elem, $attrs) {
            $scope.noRemarks = !1, $scope.cancel = modals.reject, $scope.submit = function() {
                "string" == typeof $scope.remarks && $scope.remarks.trim() ? modals.resolve($scope.remarks) : $scope.noRemarks = !0;
            };
        }
    };
}

function recordApproveSubmitModal(modals, appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/time/record/record-approve-submit-modal",
        link: function($scope, $elem, $attrs) {
            $scope.approved = modals.params().approved, $scope.approvedCount = $scope.approved ? Object.keys($scope.approved).length : 0, 
            $scope.disapproved = modals.params().disapproved, $scope.disapprovedCount = $scope.disapproved ? Object.keys($scope.disapproved).length : 0, 
            $scope.cancel = modals.reject, $scope.resolve = function() {
                modals.resolve();
            };
        }
    };
}

function recordReminderPromptModal(modals, appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/time/record/record-reminder-modal",
        link: function($scope, $elem, $attrs) {
            var params = modals.params();
            $scope.records = params.records, $scope.empIds = [], $scope.empIdRecordMap = {}, 
            $scope.records.forEach(function(record) {
                var empId = record.employeeId;
                $scope.empIds.indexOf(empId) === -1 && $scope.empIds.push(empId), $scope.empIdRecordMap.hasOwnProperty(empId) || ($scope.empIdRecordMap[empId] = []), 
                $scope.empIdRecordMap[empId].push(record);
            }), $scope.reject = modals.reject, $scope.resolve = modals.resolve;
        }
    };
}

function empRecordHistoryCtrl($scope, $q, appProps, ActiveYearsTimeRecordsApi, TimeRecordsApi, AttendanceRecordApi, SupervisorEmployeesApi, modals, recordUtils) {
    function setAdditionalEmpData(emp) {
        emp.supStartMoment = moment(emp.supStartDate || "1970-01-01"), emp.supEndMoment = moment(emp.supEndDate || void 0), 
        emp.dropDownLabel = emp.empLastName + " (" + emp.supStartMoment.format("MMM YYYY") + " - " + emp.supEndMoment.format("MMM YYYY") + ")";
    }
    function initTimesheetRecords() {
        angular.forEach($scope.state.timesheetRecords, function(record) {
            recordUtils.calculateDailyTotals(record), record.totals = recordUtils.getRecordTotals(record), 
            $scope.state.records.push(record);
        });
    }
    function initAttendRecords() {
        $scope.state.paperTimesheetsDisplayed = !1, $scope.state.attendRecords.filter(useAttendRecord).map(recordUtils.formatAttendRecord).forEach(function(record) {
            $scope.state.paperTimesheetsDisplayed = !0, $scope.state.records.push(record);
        });
    }
    function useAttendRecord(attendRec) {
        if (!attendRec.paperTimesheet) return !1;
        var timeRecords = $scope.state.timesheetRecords;
        for (var iTrec in timeRecords) if (timeRecords.hasOwnProperty(iTrec)) {
            var timeRec = timeRecords[iTrec];
            if (attendRec.beginDate === timeRec.beginDate && attendRec.endDate === timeRec.endDate) return !1;
        }
        return !0;
    }
    $scope.state = {
        supId: appProps.user.employeeId,
        searching: !1,
        todayMoment: moment(),
        selectedEmp: null,
        recordYears: [],
        selectedRecYear: null,
        supStartDate: null,
        supEndDate: null,
        records: [],
        timesheetRecords: [],
        attendRecords: [],
        allEmps: [],
        primaryEmps: []
    }, $scope.getEmployeeGroups = function(supId, fromDate, toDate) {
        var fromDateMoment = fromDate ? moment(fromDate) : moment().subtract(2, "years"), toDateMoment = toDate ? moment(toDate) : moment();
        $scope.state.searching = !0, SupervisorEmployeesApi.get({
            supId: supId,
            fromDate: fromDateMoment.format("YYYY-MM-DD"),
            toDate: toDateMoment.format("YYYY-MM-DD")
        }, function(resp) {
            if (1 == resp.success) {
                $scope.state.primaryEmps = resp.result.primaryEmployees.sort(function(a, b) {
                    return a.empLastName.localeCompare(b.empLastName);
                });
                var primaryEmpLookup = {};
                angular.forEach($scope.state.primaryEmps, function(emp) {
                    emp.group = "Direct employees", primaryEmpLookup[emp.empId] = emp.empLastName, setAdditionalEmpData(emp), 
                    $scope.state.allEmps.push(emp);
                }), angular.forEach(resp.result.empOverrideEmployees, function(emp) {
                    emp.group = "Additional Employees", setAdditionalEmpData(emp), $scope.state.allEmps.push(emp);
                }), angular.forEach(resp.result.supOverrideEmployees.items, function(supGroup, supId) {
                    angular.forEach(supGroup, function(emp) {
                        emp.group = primaryEmpLookup[supId] ? primaryEmpLookup[supId] + "'s Employees" : "Sup Override Employees", 
                        setAdditionalEmpData(emp), $scope.state.allEmps.push(emp);
                    });
                }), $scope.state.selectedEmp = $scope.state.allEmps[0], $scope.getTimeRecordsForEmp($scope.state.selectedEmp);
            }
            $scope.state.searching = !1;
        }, function(resp) {
            $scope.state.searching = !1, modals.open("500", {
                details: resp
            });
        });
    }, $scope.getTimeRecordsForEmp = function(emp) {
        ActiveYearsTimeRecordsApi.get({
            empId: emp.empId
        }, function(resp) {
            if (resp.success) {
                var supStartYear = emp.supStartMoment.year(), supEndYear = emp.supEndMoment.year();
                $scope.state.recordYears = resp.years.filter(function(year) {
                    return year >= supStartYear && year <= supEndYear;
                }).reverse(), $scope.state.selectedRecYear = $scope.state.recordYears[0], resp.years.length > 0 && $scope.getRecordsForYear(emp, $scope.state.selectedRecYear);
            }
        }, function(resp) {
            modals.open("500", {
                details: resp
            });
        });
    }, $scope.getRecordsForYear = function(emp, year) {
        $scope.state.records = [], $scope.state.attendRecords = [], $scope.state.timesheetRecords = [];
        var startMoment = moment([ year, 0, 1 ]), endMoment = $scope.state.todayMoment.year() == year ? moment() : moment([ year, 11, 31 ]);
        return startMoment.isAfter(emp.supEndMoment) || endMoment.isBefore(emp.supStartMoment) ? void ($scope.state.records = []) : ($scope.state.supStartDate = moment.max(startMoment, emp.supStartMoment), 
        $scope.state.supEndDate = moment.min(endMoment, emp.supEndMoment), $scope.state.searching = !0, 
        void $q.all([ $scope.getTimesheetRecords(), $scope.getAttendRecords() ]).then(function() {
            initTimesheetRecords(), initAttendRecords(), $scope.state.records.sort(recordUtils.compareRecords).reverse();
        }).finally(function() {
            $scope.state.searching = !1;
        }));
    }, $scope.getTimesheetRecords = function() {
        var emp = $scope.state.selectedEmp;
        return TimeRecordsApi.get({
            empId: emp.empId,
            from: $scope.state.supStartDate.format("YYYY-MM-DD"),
            to: $scope.state.supEndDate.format("YYYY-MM-DD")
        }, function(resp) {
            $scope.state.timesheetRecords = (resp.result.items[emp.empId] || []).reverse();
        }, function(resp) {
            modals.open("500", {
                details: resp
            });
        }).$promise;
    }, $scope.getAttendRecords = function(emp, year) {
        var params = {
            empId: $scope.state.selectedEmp.empId,
            from: $scope.state.supStartDate.format("YYYY-MM-DD"),
            to: $scope.state.supEndDate.format("YYYY-MM-DD")
        };
        return AttendanceRecordApi.get(params, function(response) {
            $scope.state.attendRecords = response.records;
        }, function(errorResponse) {
            modals.open("500", {
                details: errorResponse
            });
        }).$promise;
    }, $scope.showDetails = function(record) {
        if (!record.paperTimesheet) {
            var params = {
                record: record
            };
            modals.open("record-details", params, !0);
        }
    }, $scope.init = function() {
        $scope.getEmployeeGroups($scope.state.supId);
    }();
}

function recordValidatorDirective($timeout, $rootScope, debounce, activeRow) {
    return {
        restrict: "A",
        scope: {
            validateRecord: "&validate",
            record: "="
        },
        link: function($scope, $elem, $attrs) {
            function validate() {
                $scope.validateRecord(), $rootScope.$emit("validateRecordEntries");
            }
            var debounceDelay = 350, debouncedValidate = debounce(validate, debounceDelay);
            $scope.$watch("record.timeRecordId", function() {
                $timeout(function() {
                    $elem.children().each(function(index) {
                        function focusInCallBack(event) {
                            activeRow.setActiveRow(index), debouncedValidate();
                        }
                        function focusOutCallback(event) {
                            activeRow.setActiveRow(null), debouncedValidate();
                        }
                        var element = angular.element($elem.children()[index]);
                        element.on("focusin", focusInCallBack), element.on("focusout", focusOutCallback);
                    });
                });
            });
        }
    };
}

function entryValidatorDirective($timeout, $rootScope) {
    return {
        restrict: "A",
        scope: {
            validate: "&"
        },
        link: function($scope, $element, $attrs) {
            function validateEntry(event, args) {
                $scope.validate() ? $element.removeClass("invalid") : $element.addClass("invalid");
            }
            var deregisterValidateEntry = $rootScope.$on("validateRecordEntries", validateEntry);
            $scope.$on("$destroy", deregisterValidateEntry);
        }
    };
}

function activeTimeEntryRowService() {
    var activeRow = null;
    return {
        getActiveRow: function() {
            return activeRow;
        },
        setActiveRow: function(row) {
            activeRow = row;
        }
    };
}

function accrualHistoryCtrl($scope, $timeout, appProps, AccrualHistoryApi, EmpActiveYearsApi, EmpInfoApi, modals, accrualUtils) {
    function getEmpInfo() {
        $scope.state.empId && EmpInfoApi.get({
            empId: $scope.state.empId,
            detail: !0
        }, function(response) {
            var empInfo = response.employee;
            $scope.state.empInfo = empInfo, $scope.state.isTe = "TE" === empInfo.payType;
        }, function(errorResponse) {
            modals.open("500", errorResponse);
        });
    }
    $scope.state = {
        empId: appProps.user.employeeId,
        today: moment(),
        accSummaries: {},
        activeYears: [],
        selectedYear: null,
        empInfo: {},
        isTe: !1,
        searching: !1,
        error: null
    }, $scope.floatTheadOpts = {
        scrollingTop: 47,
        useAbsolutePositioning: !1
    }, $scope.$watch("state.empId", getEmpInfo), $scope.getAccSummaries = function(year) {
        if ($scope.state.accSummaries[year]) return $scope.state.accSummaries[year];
        $scope.state.searching = !0;
        var fromDate = moment([ year, 0, 1 ]), toDate = moment([ year + 1, 0, 1 ]).subtract(1, "days");
        AccrualHistoryApi.get({
            empId: $scope.state.empId,
            fromDate: fromDate.format("YYYY-MM-DD"),
            toDate: toDate.format("YYYY-MM-DD")
        }, function(resp) {
            resp.success && ($scope.state.error = null, accrualUtils.computeDeltas(resp.result), 
            $scope.state.accSummaries[year] = resp.result.filter(function(acc) {
                return !acc.computed;
            }).reverse()), $scope.state.searching = !1;
        }, function(resp) {
            modals.open("500", {
                details: resp
            }), $scope.state.error = {
                title: "Could not retrieve accrual information.",
                message: "If you are eligible for accruals please try again later."
            };
        });
    }, $scope.getEmpActiveYears = function(callBack) {
        EmpActiveYearsApi.get({
            empId: $scope.state.empId
        }, function(resp) {
            $scope.state.activeYears = resp.activeYears.reverse(), $scope.state.selectedYear = resp.activeYears[0], 
            callBack && callBack();
        }, function(resp) {
            modals.open("500", {
                details: resp
            });
        });
    }, $scope.getaccSummaries = function() {
        return $timeout(function() {
            $("table").floatThead("reflow");
        }, 0), $scope.state.accSummaries[$scope.state.selectedYear];
    }, $scope.init = function() {
        $scope.getEmpActiveYears(function() {
            $scope.getAccSummaries($scope.state.selectedYear);
        });
    }();
}

function accrualProjectionCtrl($scope, $timeout, appProps, AccrualHistoryApi, EmpInfoApi, modals, accrualUtils) {
    function isValidProjection(acc) {
        return acc.computed && "TE" !== acc.empState.payType && acc.empState.employeeActive;
    }
    function initializeProjection(projection) {
        return deltaFields.forEach(function(fieldName) {
            0 === projection[fieldName] && (projection[fieldName] = null);
        }), projection;
    }
    function getEmpInfo() {
        $scope.state.empId && EmpInfoApi.get({
            empId: $scope.state.empId,
            detail: !0
        }, function(response) {
            var empInfo = response.employee;
            $scope.state.empInfo = empInfo, $scope.state.isTe = "TE" === empInfo.payType;
        }, function(errorResponse) {
            modals.open("500", errorResponse);
        });
    }
    $scope.state = {
        empId: appProps.user.employeeId,
        today: moment(),
        projections: {},
        accSummaries: {},
        selectedYear: moment().year(),
        empInfo: {},
        isTe: !1,
        searching: !1,
        error: null
    }, $scope.floatTheadOpts = {
        scrollingTop: 47,
        useAbsolutePositioning: !1
    }, $scope.$watch("state.empId", getEmpInfo), $scope.init = function() {
        $scope.getAccSummaries($scope.state.selectedYear);
    }, $scope.getAccSummaries = function(year) {
        $scope.state.searching = !0;
        var fromDate = moment([ year, 0, 1 ]), toDate = moment([ year + 1, 0, 1 ]).subtract(1, "days");
        AccrualHistoryApi.get({
            empId: $scope.state.empId,
            fromDate: fromDate.format("YYYY-MM-DD"),
            toDate: toDate.format("YYYY-MM-DD")
        }, function(resp) {
            resp.success && ($scope.state.error = null, accrualUtils.computeDeltas(resp.result), 
            $scope.state.accSummaries[year] = resp.result.filter(function(acc) {
                return !acc.computed;
            }).reverse(), year >= $scope.state.today.year() - 1 && ($scope.state.projections[year] = resp.result.filter(isValidProjection).map(initializeProjection))), 
            $scope.state.searching = !1;
        }, function(resp) {
            modals.open("500", {
                details: resp
            }), $scope.state.error = {
                title: "Could not retrieve accrual information.",
                message: "If you are eligible for accruals please try again later."
            };
        });
    }, $scope.recalculateProjectionTotals = function(year) {
        var summLen = ($scope.state.projections[year].length, $scope.state.accSummaries[year].length), baseRec = null;
        baseRec = summLen > 0 ? $scope.state.accSummaries[year][0] : $scope.state.projections[year][0];
        for (var per = baseRec.personalUsed, vac = baseRec.vacationUsed, sick = baseRec.empSickUsed + baseRec.famSickUsed, i = 0; i < $scope.state.projections[year].length; i++) {
            var rec = $scope.state.projections[year][i];
            per += rec.personalUsedDelta || 0, vac += rec.vacationUsedDelta || 0, sick += rec.sickUsedDelta || 0, 
            rec.personalAvailable = rec.personalAccruedYtd - per, rec.vacationAvailable = rec.vacationAccruedYtd + rec.vacationBanked - vac, 
            rec.sickAvailable = rec.sickAccruedYtd + rec.sickBanked - sick;
        }
    };
    var deltaFields = [ "personalUsedDelta", "vacationUsedDelta", "sickUsedDelta" ];
    $scope.getProjection = function() {
        return $timeout(function() {
            $("table").floatThead("reflow");
        }, 0), $scope.state.projections[$scope.state.selectedYear];
    }, $scope.init();
}

function accrualUtils() {
    function computeDeltas(accruals) {
        for (var i = 0; i < accruals.length; i++) {
            var currSummary = accruals[i];
            if (0 == i) currSummary.vacationUsedDelta = currSummary.vacationUsed, currSummary.personalUsedDelta = currSummary.personalUsed, 
            currSummary.sickUsedDelta = currSummary.empSickUsed + currSummary.famSickUsed; else {
                var prevSummary = accruals[i - 1];
                currSummary.vacationUsedDelta = currSummary.vacationUsed - prevSummary.vacationUsed, 
                currSummary.personalUsedDelta = currSummary.personalUsed - prevSummary.personalUsed, 
                currSummary.sickUsedDelta = currSummary.empSickUsed + currSummary.famSickUsed - (prevSummary.empSickUsed + prevSummary.famSickUsed);
            }
        }
    }
    return {
        computeDeltas: computeDeltas
    };
}

var essTime = angular.module("essTime");

essApp.controller("TimeMainCtrl", [ "$scope", "appProps", "LocationService", "badgeService", "SupervisorTimeRecordCountsApi", function($scope, appProps, locationService, badgeService, SupervisorTimeRecordCountsApi) {
    $scope.initializePendingRecordsBadge = function() {
        var isoDateFmt = "YYYY-MM-DD", params = {
            supId: appProps.user.employeeId,
            status: "SUBMITTED",
            from: moment().subtract(1, "year").format(isoDateFmt),
            to: moment().format(isoDateFmt)
        };
        SupervisorTimeRecordCountsApi.get(params, function(resp) {
            badgeService.setBadgeValue("pendingRecordCount", resp.result.count);
        });
    }, $scope.go = function(path, params) {
        locationService.go(path, !1, params);
    }, $scope.logout = function() {
        locationService.go("/logout", !0);
    }, $scope.log = function(stuff) {};
} ]);

var essTime = angular.module("essTime");

essTime.filter("timeRecordStatus", [ "$sce", function($sce) {
    var statusDispMap = {
        NOT_SUBMITTED: [ "Not Submitted", "#444444" ],
        SUBMITTED: [ "Submitted", "#0e4e5a" ],
        DISAPPROVED: [ "Supervisor Disapproved", "#B90504" ],
        APPROVED: [ "Supervisor Approved", "#799933" ],
        DISAPPROVED_PERSONNEL: [ "Personnel Disapproved", "#B90504" ],
        SUBMITTED_PERSONNEL: [ "Submitted Personnel", "#808d0a" ],
        APPROVED_PERSONNEL: [ "Personnel Approved", "#799933" ]
    };
    return function(status, showColor) {
        var statusDisp = statusDispMap.hasOwnProperty(status) ? statusDispMap[status][0] : "Unknown Status", color = statusDispMap.hasOwnProperty(status) ? statusDispMap[status][1] : "red";
        return showColor ? $sce.trustAsHtml("<span style='color:" + color + "'>" + statusDisp + "</span>") : statusDisp;
    };
} ]), essTime.filter("miscLeave", [ "appProps", function(appProps) {
    var miscLeaveMap = {};
    return angular.forEach(appProps.miscLeaves, function(miscLeave) {
        miscLeaveMap[miscLeave.type] = miscLeave;
    }), function(miscLeave, defaultLabel) {
        return miscLeaveMap.hasOwnProperty(miscLeave) ? miscLeaveMap[miscLeave].shortName : miscLeave ? miscLeave + "?!" : defaultLabel ? defaultLabel : "--";
    };
} ]), essTime.filter("hoursDiffHighlighter", [ "$sce", function($sce) {
    return function(hours) {
        var color = "#0e4e5a", sign = "";
        return hours > 0 ? (color = "#09BB05", sign = "+") : hours < 0 && (color = "#BB0505"), 
        $sce.trustAsHtml('<span style="color:' + color + '">' + sign + hours + "</span>");
    };
} ]);

var essTime = angular.module("essTime");

essTime.directive("timeRecordInput", [ function() {
    return {
        restrict: "A",
        link: function(scope, element, attrs) {
            element.on("focus", function(event) {
                $(this).attr("type", "number"), $(this).parent().parent().addClass("active");
            }), element.on("blur", function(event) {
                $(this).attr("type", "text"), $(this).parent().parent().removeClass("active");
            });
        }
    };
} ]), essTime.directive("recordDetails", [ "appProps", "modals", function(appProps, modals) {
    return {
        scope: {
            record: "="
        },
        templateUrl: appProps.ctxPath + "/template/time/record/details",
        link: function($scope, $elem, attrs) {
            $scope.close = modals.reject, $scope.tempEntries = $scope.annualEntries = !1;
            var recordInitialized = !1;
            $scope.$watch("record", function() {
                recordInitialized || (angular.forEach($scope.record.timeEntries, function(entry) {
                    $scope.tempEntries = $scope.tempEntries || "TE" === entry.payType, $scope.annualEntries = $scope.annualEntries || [ "RA", "SA" ].indexOf(entry.payType) > -1;
                }), recordInitialized = !0);
            });
        }
    };
} ]), essTime.directive("recordDetailModal", [ "modals", function(modals) {
    return {
        template: '<div class="record-detail-modal" record-details record="record"></div>',
        link: function($scope, $elem, $attrs) {
            var params = modals.params();
            $scope.record = params.record;
        }
    };
} ]);

var essTime = angular.module("essTime");

essTime.service("RecordUtils", [ function() {
    function getTimeEntryFields() {
        return timeEntryFields.slice();
    }
    function getDailyTotal(entry) {
        return timeEntryFields.map(function(timeField) {
            return +entry[timeField];
        }).reduce(function(a, b) {
            return a + b;
        });
    }
    function calculateDailyTotals(record) {
        for (var i = 0, entries = record.timeEntries; i < entries.length; i++) entries[i].total = getDailyTotal(entries[i]);
    }
    function getTotal(record, type, payTypes) {
        var total = 0, entries = record.timeEntries;
        if (entries) for (var i = 0; i < entries.length; i++) (!payTypes || payTypes.indexOf(entries[i].payType) >= 0) && (total += +(entries[i][type] || 0));
        return total;
    }
    function getRecordTotals(record) {
        var totals = {};
        for (var iField in timeEntryFields) {
            var field = timeEntryFields[iField];
            totals[field] = getTotal(record, field);
        }
        return totals.raSaWorkHours = getTotal(record, "workHours", [ "RA", "SA" ]), totals.tempWorkHours = getTotal(record, "workHours", [ "TE" ]), 
        totals.raSaTotal = getTotal(record, "total", [ "RA", "SA" ]), totals.total = getTotal(record, "total"), 
        totals;
    }
    function formatAttendRecord(attendRecord) {
        return attendRecord.totals = {
            workHours: attendRecord.workHours,
            holidayHours: attendRecord.holidayHours,
            vacationHours: attendRecord.vacationHours,
            personalHours: attendRecord.personalHours,
            sickEmpHours: attendRecord.sickEmpHours,
            sickFamHours: attendRecord.sickFamHours,
            miscHours: attendRecord.miscHours,
            total: attendRecord.totalHours
        }, attendRecord.recordStatus = "APPROVED_PERSONNEL", attendRecord.payPeriod = {
            payPeriodNum: attendRecord.payPeriodNum
        }, attendRecord;
    }
    function compareRecords(lhs, rhs) {
        var lhsBegin = moment(lhs.beginDate), rhsBegin = moment(rhs.beginDate);
        if (lhsBegin.isBefore(rhsBegin)) return -1;
        if (lhsBegin.isAfter(rhsBegin)) return 1;
        var lhsEnd = moment(lhs.endDate), rhsEnd = moment(rhs.endDate);
        return lhsEnd.isBefore(rhsEnd) ? -1 : lhsEnd.isAfter(rhsEnd) ? 1 : 0;
    }
    var timeEntryFields = [ "workHours", "travelHours", "holidayHours", "vacationHours", "personalHours", "sickEmpHours", "sickFamHours", "miscHours" ];
    return {
        getDailyTotal: getDailyTotal,
        calculateDailyTotals: calculateDailyTotals,
        getTotal: getTotal,
        getRecordTotals: getRecordTotals,
        getTimeEntryFields: getTimeEntryFields,
        formatAttendRecord: formatAttendRecord,
        compareRecords: compareRecords
    };
} ]);

var essApp = angular.module("ess").controller("RecordEntryController", [ "$scope", "$rootScope", "$filter", "$q", "$timeout", "appProps", "ActiveTimeRecordsApi", "TimeRecordApi", "AccrualPeriodApi", "AllowanceApi", "MiscLeaveGrantApi", "HolidayApi", "activeTimeEntryRow", "RecordUtils", "LocationService", "modals", "promiseUtils", recordEntryCtrl ]), essTime = angular.module("essTime");

essTime.controller("RecordHistoryCtrl", [ "$scope", "$q", "appProps", "ActiveYearsTimeRecordsApi", "TimeRecordApi", "AttendanceRecordApi", "modals", "RecordUtils", recordHistoryCtrl ]);

var essApp = angular.module("ess");

essApp.controller("RecordManageCtrl", [ "$scope", "$q", "appProps", "RecordUtils", "modals", "badgeService", "SupervisorTimeRecordsApi", "TimeRecordApi", "TimeRecordReminderApi", recordManageCtrl ]);

var essApp = angular.module("ess");

essApp.directive("supervisorRecordList", [ "appProps", "modals", function(appProps, modals) {
    function link($scope, $elem, $attr) {
        $scope.showDetails = function(record) {
            var params = {
                record: record,
                employee: record.employee
            };
            modals.open("record-details", params, !0);
        }, $scope.toggleSelected = function(index) {
            return !!$scope.selectedIndices && $scope.setSelected(index, !$scope.selectedIndices[index]);
        }, $scope.setSelected = function(index, isSelected) {
            return !!$scope.selectedIndices && (isSelected ? ($scope.selectedIndices[index] = !0, 
            !0) : (delete $scope.selectedIndices[index], !1));
        }, $scope.toggleRecsForEmp = function(record) {
            var desiredState = null;
            $scope.selectedIndices && angular.forEach($scope.records, function(rec, i) {
                rec.employeeId === record.employeeId && (null === desiredState ? desiredState = $scope.toggleSelected(i) : $scope.setSelected(i, desiredState));
            });
        };
    }
    return {
        scope: {
            supId: "=",
            records: "=",
            selectedIndices: "=?"
        },
        templateUrl: appProps.ctxPath + "/template/time/record/supervisor-record-list",
        link: link
    };
} ]);

var essApp = angular.module("ess");

essApp.directive("recordReviewModal", [ "appProps", "modals", "LocationService", recordReviewModal ]), 
essApp.directive("recordReviewRejectModal", [ "modals", "appProps", recordReviewRejectModal ]), 
essApp.directive("recordApproveSubmitModal", [ "modals", "appProps", recordApproveSubmitModal ]), 
essApp.directive("recordReminderPromptModal", [ "modals", "appProps", recordReminderPromptModal ]);

var essTime = angular.module("essTime");

essTime.controller("EmpRecordHistoryCtrl", [ "$scope", "$q", "appProps", "ActiveYearsTimeRecordsApi", "TimeRecordApi", "AttendanceRecordApi", "SupervisorEmployeesApi", "modals", "RecordUtils", empRecordHistoryCtrl ]), 
angular.module("essTime").directive("recordValidator", [ "$timeout", "$rootScope", "debounce", "activeTimeEntryRow", recordValidatorDirective ]).directive("entryValidator", [ "$timeout", "$rootScope", entryValidatorDirective ]).service("activeTimeEntryRow", activeTimeEntryRowService);

var essTimeOff = angular.module("essTime");

essTimeOff.controller("NewRequestCtrl", [ "$scope", "$http", function($scope, $http) {
    $scope.vac = 21, $scope.sick = 482, $scope.personal = 34;
} ]);

var essTime = angular.module("essTime");

essTime.controller("PayPeriodCalendarCtrl", [ "$scope", "$http", "PayPeriodApi", "HolidayApi", "modals", function($scope, $http, PayPeriodApi, HolidayApi, modals) {
    $scope.state = {
        year: moment().year(),
        currentDayMoment: moment().startOf("day")
    }, $scope.yearList = Array.apply(0, Array(10)).map(function(x, y) {
        return $scope.state.year + 2 - y - 1;
    }), $scope.months = [], $scope.periods = [], $scope.getPayPeriods = function(year, callback) {
        $scope.periodResp = PayPeriodApi.get({
            periodType: "AF",
            year: year
        }, function() {
            $scope.periods = $scope.periodResp.periods, $scope.periodMap = $scope.periods.reduce(function(res, curr) {
                return res[curr.endDate] = curr, res;
            }, {}), callback && callback();
        }, function(resp) {
            modals.open("500", {
                details: resp
            });
        });
    }, $scope.getHolidays = function(year, callback) {
        $scope.holidaysResp = HolidayApi.get({
            year: year
        }, function() {
            $scope.holidays = $scope.holidaysResp.holidays, $scope.holidayMap = $scope.holidays.reduce(function(res, curr) {
                return res[curr.date] = curr, res;
            }, {}), callback && callback();
        });
    }, $scope.generateMonths = function(year) {
        $scope.months = [];
        for (var i = 0; i < 12; i++) $scope.months.push(moment().year(year).month(i).format("M/D/YYYY"));
    }, $scope.$watch("state.year", function(year, oldYear) {
        $scope.getPayPeriods(year, function() {
            $scope.getHolidays(year, function() {
                $scope.generateMonths(year);
            });
        });
    }), $scope.periodHighlight = function() {
        return function(date) {
            var cssClasses = [], toolTips = [], mDate = moment(date).startOf("day"), mDateStr = mDate.format("YYYY-MM-DD");
            return mDate.isSame($scope.state.currentDayMoment) && cssClasses.push("current-date"), 
            6 == mDate.day() || 0 == mDate.day() ? cssClasses.push("weekend-date") : ($scope.holidayMap[mDateStr] && (toolTips.push($scope.holidayMap[mDateStr].name), 
            cssClasses.push("holiday-date")), $scope.periodMap[mDateStr] && !$scope.periodMap[mDateStr].endYearSplit && (toolTips.push("Last Day of Pay Period " + $scope.periodMap[mDateStr].payPeriodNum), 
            cssClasses.push("pay-period-end-date"))), [ !1, cssClasses.join(" "), toolTips.join(" \\ ") ];
        };
    };
} ]);

var essTime = angular.module("essTime");

essTime.controller("AccrualHistoryCtrl", [ "$scope", "$timeout", "appProps", "AccrualHistoryApi", "EmpActiveYearsApi", "EmpInfoApi", "modals", "AccrualUtils", accrualHistoryCtrl ]);

var essTime = angular.module("essTime");

essTime.controller("AccrualProjectionCtrl", [ "$scope", "$timeout", "appProps", "AccrualHistoryApi", "EmpInfoApi", "modals", "AccrualUtils", accrualProjectionCtrl ]), 
angular.module("essTime").service("AccrualUtils", accrualUtils);

var essTime = angular.module("essTime");

essTime.controller("GrantPrivilegesCtrl", [ "$scope", "$http", "appProps", "SupervisorChainApi", "SupervisorGrantsApi", "SupervisorOverridesApi", "modals", function($scope, $http, appProps, SupervisorChainApi, SupervisorGrantsApi, SupervisorOverridesApi, modals) {
    $scope.state = {
        empId: appProps.user.employeeId,
        selectedGrantee: null,
        grantees: null,
        granteeMap: null,
        granters: [],
        modified: !1,
        fetched: !1,
        saving: !1,
        saved: !1
    }, $scope.init = function() {
        $scope.state.selectedGrantee = null, $scope.state.grantees = [], $scope.state.granteeMap = {}, 
        $scope.state.granters = [], $scope.state.modified = $scope.state.fetched = $scope.state.saving = $scope.state.saved = !1, 
        SupervisorChainApi.get({
            empId: $scope.state.empId
        }, function(resp) {
            1 == resp.success && angular.forEach(resp.result.supChain, function(sup) {
                sup.granted = !1, sup.grantStart = sup.grantEnd = null, $scope.state.grantees.push(sup), 
                $scope.state.granteeMap[sup.employeeId] = sup;
            });
        }).$promise.then(function(resp) {
            return SupervisorGrantsApi.get({
                supId: $scope.state.empId
            }, function(resp) {
                resp.success && angular.forEach(resp.grants, function(grant) {
                    var supId = grant.granteeSupervisorId;
                    $scope.state.granteeMap[supId] || ($scope.state.grantees.push(grant.granteeSupervisor), 
                    $scope.state.granteeMap[supId] = grant.granteeSupervisor), $scope.state.granteeMap[supId].granted = !0, 
                    $scope.state.granteeMap[supId].grantStart = null != grant.startDate ? moment(grant.startDate).format("MM/DD/YYYY") : null, 
                    $scope.state.granteeMap[supId].grantEnd = null != grant.endDate ? moment(grant.endDate).format("MM/DD/YYYY") : null;
                });
            }).$promise;
        }).then(function(resp) {
            return SupervisorOverridesApi.get({
                supId: $scope.state.empId
            }, function(resp) {
                resp.success && ($scope.state.granters = resp.overrides.map(function(ovr) {
                    var granter = ovr.overrideSupervisor;
                    return granter.grantStartStr = ovr.startDate ? moment(ovr.startDate).format("MM/DD/YYYY") : "No Start Date", 
                    granter.grantEndStr = ovr.endDate ? moment(ovr.endDate).format("MM/DD/YYYY") : "No End Date", 
                    granter.activeStr = ovr.active ? "Active" : "Inactive", granter;
                })), $scope.state.fetched = !0;
            }).$promise;
        }).catch(function(resp) {
            modals.open("500", {
                details: resp
            });
        });
    }, $scope.saveGrants = function() {
        if ($scope.state.modified === !0 && $scope.state.fetched === !0) {
            var modifiedGrantees = $scope.state.grantees.filter(function(grantee) {
                return grantee.modified === !0;
            }).map(function(grantee) {
                return $scope.createGrantSaveView(grantee);
            });
            $scope.state.saving = !0, SupervisorGrantsApi.save(modifiedGrantees, function(resp) {
                $scope.state.saving = !1, $scope.state.modified = !1, $scope.state.saved = !0;
            }, function(resp) {
                modals.open("500", {
                    details: resp
                });
            });
        }
    }, $scope.createGrantSaveView = function(grantee) {
        return {
            granteeSupervisorId: grantee.employeeId,
            active: grantee.granted,
            granterSupervisorId: $scope.state.empId,
            startDate: grantee.grantStart ? moment(grantee.grantStart).format("YYYY-MM-DD") : null,
            endDate: grantee.grantEnd ? moment(grantee.grantEnd).format("YYYY-MM-DD") : null
        };
    }, $scope.setStartDate = function(grantee) {
        $scope.state.modified = !0, grantee.modified = !0, grantee.grantStart ? grantee.grantStart = null : grantee.grantStart = moment().format("MM/DD/YYYY");
    }, $scope.setEndDate = function(grantee) {
        $scope.state.modified = !0, grantee.modified = !0, grantee.grantEnd ? grantee.grantEnd = null : grantee.grantEnd = moment().format("MM/DD/YYYY");
    }, $scope.toggleGrantStatus = function(grantee) {
        $scope.state.modified = !0, grantee.modified = !0;
    }, $scope.reset = function() {
        $scope.init();
    }, $scope.init();
} ]);
//# sourceMappingURL=ess-time.min.js.map