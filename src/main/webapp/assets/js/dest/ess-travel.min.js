/*! ess - v - 2018-06-22 */
function lodgingDetailsModalCtrl($scope, modals) {
    $scope.app = modals.params().app, $scope.closeModal = function() {
        modals.resolve();
    };
}

function mealDetailsModalCtrl($scope, modals) {
    $scope.app = modals.params().app, $scope.closeModal = function() {
        modals.resolve();
    };
}

function mileageDetailsModalCtrl($scope, modals) {
    $scope.app = modals.params().app, $scope.legs = $scope.app.route.outboundLegs.concat($scope.app.route.returnLegs), 
    $scope.closeModal = function() {
        modals.resolve();
    };
}

function travelAppController($scope, $q, appProps, modals, locationService, appInitApi, purposeApi, outboundApi, returnApi, expensesApi, submitApi, motApi, cancelApi) {
    function initApplication(travelerId) {
        appInitApi.save({
            empId: travelerId
        }, {}, function(response) {
            $scope.app = response.result;
        }, $scope.handleErrorResponse);
    }
    function initMethodsOfTravel() {
        motApi.get({}, function(response) {
            $scope.modesOfTransportation = response.result;
        }, $scope.handleErrorResponse);
    }
    function updateStates(action) {
        action === $scope.ACTIONS.CANCEL ? function() {
            modals.open("cancel-application").then(function() {
                modals.resolve({}), $scope.openLoadingModal(), cancelApi.remove({
                    empId: $scope.app.traveler.employeeId
                }).$promise.then(reload).catch($scope.handleErrorResponse).finally($scope.closeLoadingModal);
            });
        }() : action === $scope.ACTIONS.BACK ? function() {
            switch ($scope.pageState) {
              case $scope.STATES.PURPOSE:
                break;

              case $scope.STATES.OUTBOUND:
                $scope.pageState = $scope.STATES.PURPOSE;
                break;

              case $scope.STATES.RETURN:
                $scope.pageState = $scope.STATES.OUTBOUND;
                break;

              case $scope.STATES.ALLOWANCES:
                $scope.pageState = $scope.STATES.RETURN;
                break;

              case $scope.STATES.REVIEW:
                $scope.pageState = $scope.STATES.ALLOWANCES;
            }
        }() : action === $scope.ACTIONS.NEXT && function() {
            switch ($scope.pageState) {
              case $scope.STATES.PURPOSE:
                $scope.pageState = $scope.STATES.OUTBOUND;
                break;

              case $scope.STATES.OUTBOUND:
                $scope.pageState = $scope.STATES.RETURN;
                break;

              case $scope.STATES.RETURN:
                $scope.pageState = $scope.STATES.ALLOWANCES;
                break;

              case $scope.STATES.ALLOWANCES:
                $scope.pageState = $scope.STATES.REVIEW;
                break;

              case $scope.STATES.REVIEW:
            }
        }();
    }
    function updateAppFromResponse(response) {
        $scope.app = response.result;
    }
    function catchErrorResponse(response) {
        modals.isOpen("loading") && $scope.closeLoadingModal(), $scope.handleErrorResponse(response);
    }
    function reload() {
        locationService.go("/travel/application/travel-application", !0);
    }
    $scope.ACTIONS = {
        CANCEL: 5,
        BACK: 10,
        NEXT: 15
    }, $scope.STATES = {
        PURPOSE: 5,
        OUTBOUND: 10,
        RETURN: 20,
        ALLOWANCES: 25,
        REVIEW: 30
    }, $scope.pageState = void 0, $scope.app = void 0, function() {
        $scope.pageState = $scope.STATES.PURPOSE, initApplication(appProps.user.employeeId), 
        initMethodsOfTravel();
    }(), $scope.purposeCallback = function(action, purpose) {
        action === $scope.ACTIONS.NEXT ? ($scope.openLoadingModal(), purposeApi.update({
            id: $scope.app.id
        }, purpose, function(response) {
            updateAppFromResponse(response), updateStates(action), $scope.closeLoadingModal();
        }).$promise.catch(catchErrorResponse)) : updateStates(action);
    }, $scope.outboundCallback = function(action, route) {
        action === $scope.ACTIONS.NEXT ? ($scope.openLoadingModal(), outboundApi.update({
            id: $scope.app.id
        }, route, function(response) {
            updateAppFromResponse(response), updateStates(action), $scope.closeLoadingModal();
        }).$promise.catch(catchErrorResponse)) : updateStates(action);
    }, $scope.returnCallback = function(action, route) {
        action === $scope.ACTIONS.NEXT ? ($scope.openLoadingModal(), returnApi.update({
            id: $scope.app.id
        }, route, function(response) {
            updateAppFromResponse(response), updateStates(action), $scope.closeLoadingModal();
        }).$promise.catch(catchErrorResponse)) : updateStates(action);
    }, $scope.allowancesCallback = function(action, destinations, allowances) {
        action === $scope.ACTIONS.NEXT ? ($scope.openLoadingModal(), expensesApi.update({
            id: $scope.app.id
        }, {
            destinations: destinations,
            allowances: allowances
        }, function(response) {
            updateAppFromResponse(response), updateStates(action), $scope.closeLoadingModal();
        }).$promise.catch(catchErrorResponse)) : updateStates(action);
    }, $scope.reviewCallback = function(action) {
        action === $scope.ACTIONS.NEXT && (modals.open("submit-progress"), submitApi.update({
            id: $scope.app.id
        }).$promise.then(function(response) {
            modals.resolve({});
        }).then(function() {
            modals.open("submit-results").then(function() {
                locationService.go("/travel/application/travel-application", !0);
            });
        }).catch($scope.handleErrorResponse)), updateStates(action);
    }, $scope.openLoadingModal = function() {
        modals.open("loading");
    }, $scope.closeLoadingModal = function() {
        modals.isTop("loading") && modals.resolve();
    }, $scope.numDistinctModesOfTransportation = function(app) {
        var mots = app.route.outboundLegs.concat(app.route.returnLegs).map(function(leg) {
            return leg.modeOfTransportation.description;
        }), distinct = _.uniq(mots);
        return distinct.length;
    }, $scope.highlightStep = function(state) {
        return state <= $scope.pageState;
    }, $scope.stepNavigable = function(state) {
        return state < $scope.pageState;
    }, $scope.gotoStep = function(state) {
        state < $scope.pageState && ($scope.pageState = state);
    };
}

function Segment() {
    this.from = {}, this.to = {}, this.departureDate = "", this.arrivalDate = "", this.travelDate = "", 
    this.modeOfTransportation = void 0, this.isMileageRequested = !0, this.isMealsRequested = !0, 
    this.isLodgingRequested = !0, this.setFrom = function(address) {
        this.from = address;
    }, this.setTo = function(address) {
        this.to = address;
    };
}

function appPrintCtrl($scope, locationService, travelAppApi, $timeout, $window) {
    $scope.app = {}, $scope.init = function() {
        function extractApplication(response) {
            $scope.app = response.result;
        }
        function printIfRequested() {
            (locationService.getSearchParam("print") || !1) && $timeout(function() {
                $window.print();
            }, 600);
        }
        var appId = locationService.getSearchParam("id");
        travelAppApi.get({
            id: appId,
            detailed: !0
        }).$promise.then(extractApplication).then(printIfRequested).catch($scope.handleErrorResponse);
    }, $scope.init();
}

function historyController($scope) {
    $scope.test = "Hello angular";
}

function travelDetailCtrl($scope, modals) {
    $scope.app = modals.params(), $scope.exit = function() {
        modals.resolve();
    };
}

function userConfigCtrl($scope, appProps, ActiveEmployeeApi, TravelUserConfigApi, TravelUserConfigSaveApi, TravelUserConfigDeleteApi, EmpInfoApi, modals) {
    $scope.dataLoaded = !1, $scope.empId = appProps.user.employeeId, $scope.init = function() {
        $scope.currentGrantee = null, $scope.granteeInfo = {
            selectedGrantee: null,
            startDate: null,
            endDate: null,
            permanent: !1
        }, $scope.grantees = [], ActiveEmployeeApi.get({
            activeOnly: !0
        }, function(resp) {
            resp.success && ($scope.grantees = resp.employees);
        }).$promise.then(function(resp) {
            return ActiveEmployeeApi.get({
                activeOnly: !0
            }, function(resp) {}).$promise;
        }).then(function(resp) {
            return $scope.dataLoaded = !0, ActiveEmployeeApi.get({
                activeOnly: !0
            }, function(resp) {}).$promise;
        }).catch(function(resp) {
            modals.open("500", {
                details: resp
            });
        }), TravelUserConfigApi.get({
            empId: $scope.empId
        }, function(resp) {
            0 != resp.result.requestorId && ($scope.currentGrantee = resp.result, EmpInfoApi.get({
                empId: $scope.currentGrantee.empId
            }, function(resp) {
                if (resp.success) for (var i = 0, length = $scope.grantees.length; i < length; i++) {
                    var grantee = $scope.grantees;
                    if (grantee.fullName == resp.employee.fullName) break;
                }
            }), $scope.granteeInfo.startDate = moment(resp.result.startDate).format("MM/DD/YYYY"), 
            null == resp.result.endDate ? $scope.granteeInfo.permanent = !0 : $scope.granteeInfo.endDate = moment(resp.result.endDate).format("MM/DD/YYYY"));
        }).$promise.then(function(resp) {
            return TravelUserConfigApi.get({
                empId: $scope.empId
            }, function(resp) {}).$promise;
        }).then(function(resp) {
            return TravelUserConfigApi.get({
                empId: $scope.empId
            }, function(resp) {}).$promise;
        }).catch(function(resp) {
            modals.open("500", {
                details: resp
            });
        });
    }, $scope.formNotFilledOut = function() {
        return !($scope.granteeInfo.selectedGrantee && $scope.granteeInfo.startDate && ($scope.granteeInfo.permanent || $scope.granteeInfo.endDate));
    }, $scope.deleteRequester = function() {
        TravelUserConfigDeleteApi.save({
            empId: $scope.empId
        }, {}, function(resp) {});
    }, $scope.saveGrants = function() {
        var params = {
            empId: $scope.empId,
            requestorId: $scope.granteeInfo.selectedGrantee.empId,
            startDate: $scope.granteeInfo.startDate,
            endDate: $scope.granteeInfo.endDate
        };
        TravelUserConfigSaveApi.save(params, {}, function(resp) {}, function(resp) {
            modals.open("500", {
                details: resp
            });
        });
    }, $scope.setPermanent = function() {
        $scope.granteeInfo.permanent ? ($scope.granteeInfo.startDate = moment().format("MM/DD/YYYY"), 
        $scope.granteeInfo.endDate = null) : ($scope.granteeInfo.startDate = null, $scope.granteeInfo.endDate = null);
    }, $scope.setStartDate = function() {
        document.getElementById("grant-start-date").checked ? $scope.granteeInfo.startDate = moment().format("MM/DD/YYYY") : $scope.granteeInfo.startDate = null;
    }, $scope.setEndDate = function() {
        document.getElementById("grant-end-date").checked ? $scope.granteeInfo.endDate = moment().format("MM/DD/YYYY") : $scope.granteeInfo.endDate = null;
    }, $scope.reset = function() {
        $scope.granteeInfo = {
            selectedGrantee: $scope.currentGrantee.empId,
            startDate: null,
            endDate: null,
            permanent: !1
        };
    }, $scope.init();
}

function historyController($scope, appProps, modals, travelApplicationApi) {
    function fetchApplications(empId) {
        function onSuccess(resp) {
            parseResponse(resp), applyFilters(), sort($scope.apps.filtered);
        }
        function parseResponse(resp) {
            for (var result = resp.result, i = 0; i < result.length; i++) $scope.apps.all.push(result[i]);
        }
        $scope.appRequest = travelApplicationApi.get({
            empId: empId
        }, onSuccess, $scope.handleErrorResponse);
    }
    function applyFilters() {
        $scope.apps.filtered = angular.copy($scope.apps.all), $scope.apps.filtered = $scope.apps.filtered.filter(function(app) {
            return Date.parse(app.startDate) >= Date.parse($scope.date.from) && Date.parse(app.startDate) <= Date.parse($scope.date.to);
        });
    }
    function sort(apps) {
        apps.sort(function(a, b) {
            return new Date(b.startDate.date) - new Date(a.startDate.date);
        });
    }
    $scope.apps = {
        all: [],
        filtered: []
    }, $scope.appRequest = {}, $scope.date = {
        from: moment().subtract(1, "month").format("MM/DD/YYYY"),
        to: moment().add(6, "month").format("MM/DD/YYYY")
    }, $scope.init = function() {
        fetchApplications(appProps.user.employeeId);
    }, $scope.viewApplicationDetails = function(app) {
        modals.open("travel-history-detail-modal", app, !0).catch(function() {});
    }, $scope.shortAddress = function(app) {
        var addr = app.accommodations[0].address;
        return addr.city || addr.county || addr.addr1;
    }, $scope.init();
}

var essTravel = angular.module("essTravel");

essTravel.directive("travelLodgingDetailsModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/modal/travel-lodging-details-modal",
        controller: "LodgingDetailsModalCtrl"
    };
} ]).controller("LodgingDetailsModalCtrl", [ "$scope", "modals", lodgingDetailsModalCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelMealDetailsModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/modal/travel-meal-details-modal",
        controller: "MealDetailsModalCtrl"
    };
} ]).controller("MealDetailsModalCtrl", [ "$scope", "modals", mealDetailsModalCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelMileageDetailsModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/modal/travel-mileage-details-modal",
        controller: "MileageDetailsModalCtrl"
    };
} ]).controller("MileageDetailsModalCtrl", [ "$scope", "modals", mileageDetailsModalCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.controller("NewTravelApplicationCtrl", [ "$scope", "$q", "appProps", "modals", "LocationService", "TravelApplicationInitApi", "TravelApplicationPurposeApi", "TravelApplicationOutboundApi", "TravelApplicationReturnApi", "TravelApplicationExpensesApi", "TravelApplicationSubmitApi", "TravelModeOfTransportationApi", "TravelApplicationCancelApi", travelAppController ]), 
essTravel.directive("travelApplicationPurpose", [ "appProps", "$http", "TravelAttachmentDelete", function(appProps, $http, deleteAttachmentApi) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-purpose",
        scope: !0,
        link: function($scope, $elem, $attrs) {
            function uploadAttachment(event) {
                $scope.openLoadingModal();
                for (var files = attachmentInput[0].files, formData = new FormData(), i = 0; i < files.length; i++) formData.append("file", files[i]);
                $http.post(appProps.apiPath + "/travel/application/uncompleted/" + $scope.app.id + "/attachment", formData, {
                    headers: {
                        "Content-Type": void 0
                    },
                    transformRequest: angular.identity
                }).then(function(response) {
                    $scope.app = response.data.result;
                }).finally($scope.closeLoadingModal);
            }
            $scope.data = {
                purposeOfTravel: angular.copy($scope.app.purposeOfTravel)
            };
            var attachmentInput = angular.element("#addAttachment");
            attachmentInput.on("change", uploadAttachment), $scope.deleteAttachment = function(attachment) {
                deleteAttachmentApi.delete({
                    id: $scope.app.id,
                    attachmentId: attachment.id
                }, function(response) {
                    $scope.app = response.result;
                });
            };
        }
    };
} ]), essTravel.directive("travelApplicationOutbound", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-outbound",
        scope: !0,
        link: function($scope, $elem, $attrs, ctrl) {
            if ($scope.route = angular.copy($scope.app.route), 0 === $scope.route.outboundLegs.length) {
                var segment = new Segment();
                segment.from = $scope.app.traveler.empWorkLocation.address, $scope.route.outboundLegs.push(segment);
            }
            $scope.addSegment = function() {
                var segment = new Segment(), prevSeg = $scope.route.outboundLegs[$scope.route.outboundLegs.length - 1];
                segment.from = prevSeg.to, segment.modeOfTransportation = prevSeg.modeOfTransportation, 
                segment.isMileageRequested = prevSeg.isMileageRequested, segment.isMealsRequested = prevSeg.isMealsRequested, 
                segment.isLodgingRequested = prevSeg.isLodgingRequested, $scope.route.outboundLegs.push(segment);
            }, $scope.setFromAddress = function(leg, address) {
                leg.from = address;
            }, $scope.setToAddress = function(leg, address) {
                leg.to = address;
            }, $scope.isLastSegment = function(index) {
                return $scope.route.outboundLegs.length - 1 === index;
            }, $scope.deleteSegment = function() {
                $scope.route.outboundLegs.pop();
            }, $scope.submit = function() {
                for (var prop in $scope.outboundForm) $scope.outboundForm[prop] && "function" == typeof $scope.outboundForm[prop].$setTouched && $scope.outboundForm[prop].$setTouched();
                $scope.outboundForm.$valid && $scope.outboundCallback($scope.ACTIONS.NEXT, $scope.route);
            };
        }
    };
} ]), essTravel.directive("travelApplicationReturn", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-return",
        scope: !0,
        link: function($scope, $elem, $attrs, ctrl) {
            if ($scope.route = angular.copy($scope.app.route), 0 === $scope.route.returnLegs.length) {
                var segment = new Segment();
                segment.from = angular.copy($scope.route.outboundLegs[$scope.route.outboundLegs.length - 1].to), 
                segment.to = angular.copy($scope.route.outboundLegs[0].from), 1 === $scope.numDistinctModesOfTransportation($scope.app) && (segment.modeOfTransportation = angular.copy($scope.route.outboundLegs[0].modeOfTransportation)), 
                $scope.route.returnLegs.push(segment);
            }
            $scope.addSegment = function() {
                var segment = new Segment(), prevSeg = $scope.route.returnLegs[$scope.route.returnLegs.length - 1];
                segment.from = prevSeg.to, segment.to = angular.copy($scope.route.outboundLegs[0].from), 
                segment.modeOfTransportation = prevSeg.modeOfTransportation, segment.isMileageRequested = prevSeg.isMileageRequested, 
                segment.isMealsRequested = prevSeg.isMealsRequested, segment.isLodgingRequested = prevSeg.isLodgingRequested, 
                $scope.route.returnLegs.push(segment);
            }, $scope.setFromAddress = function(leg, address) {
                leg.from = address;
            }, $scope.setToAddress = function(leg, address) {
                leg.to = address;
            }, $scope.isLastSegment = function(index) {
                return $scope.route.returnLegs.length - 1 === index;
            }, $scope.deleteSegment = function() {
                $scope.route.returnLegs.pop();
            }, $scope.submit = function() {
                for (var prop in $scope.returnForm) $scope.returnForm[prop] && "function" == typeof $scope.returnForm[prop].$setTouched && $scope.returnForm[prop].$setTouched();
                $scope.returnForm.$valid && $scope.returnCallback($scope.ACTIONS.NEXT, $scope.route);
            };
        }
    };
} ]), essTravel.directive("travelApplicationAllowances", [ "appProps", "modals", function(appProps, modals) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-allowances",
        scope: !0,
        link: function($scope, $elem, $attrs) {
            function Destination() {
                this.accommodation, this.stays = [];
            }
            function Stay() {
                this.date = "", this.isMealsRequested = !1, this.isLodgingRequested = !1, this.isLodgingEligible = !1;
            }
            $scope.allowances = {
                tollsAllowance: Number(angular.copy($scope.app.tollsAllowance)),
                parkingAllowance: Number(angular.copy($scope.app.parkingAllowance)),
                alternateAllowance: Number(angular.copy($scope.app.alternateAllowance)),
                registrationAllowance: Number(angular.copy($scope.app.registrationAllowance))
            }, $scope.route = angular.copy($scope.app.route), $scope.destinations = [], angular.forEach($scope.app.accommodations, function(a) {
                var destination = new Destination();
                destination.accommodation = a, angular.forEach(a.days, function(day) {
                    var stay = new Stay();
                    stay.date = day.date, stay.isMealsRequested = day.isMealsRequested, angular.forEach(a.nights, function(night) {
                        night.date === day.date && (stay.isLodgingEligible = !0, stay.isLodgingRequested = night.isLodgingRequested);
                    }), destination.stays.push(stay);
                }), $scope.destinations.push(destination);
            }), $scope.anyReimbursableTravel = function() {
                for (var i = 0; i < $scope.route.outboundLegs.length; i++) if ("PERSONAL_AUTO" === $scope.route.outboundLegs[i].modeOfTransportation.methodOfTravel) return !0;
                for (var y = 0; y < $scope.route.returnLegs.length; y++) if ("PERSONAL_AUTO" === $scope.route.returnLegs[y].modeOfTransportation.methodOfTravel) return !0;
                return !1;
            }, $scope.isReimbursableLeg = function(leg) {
                return "PERSONAL_AUTO" === leg.modeOfTransportation.methodOfTravel;
            };
        }
    };
} ]), essTravel.directive("travelApplicationReview", [ "appProps", "$q", "modals", function(appProps, $q, modals) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-review",
        scope: !0,
        link: function($scope, $elem, $attrs) {
            $scope.reviewApp = angular.copy($scope.app), function() {
                var map, directionsDisplay = new google.maps.DirectionsRenderer(), directionsService = new google.maps.DirectionsService(), albany = new google.maps.LatLng(42.6680631, -73.8807209), mapOptions = {
                    zoom: 9,
                    center: albany
                };
                map = new google.maps.Map(document.getElementById("map"), mapOptions), directionsDisplay.setMap(map);
                var destinations = $scope.reviewApp.accommodations, origin = $scope.reviewApp.route.origin.formattedAddress, waypoints = [];
                angular.forEach(destinations, function(dest, index) {
                    waypoints.push({
                        location: dest.address.formattedAddress
                    });
                });
                var destination = waypoints.pop().location, request = {
                    origin: origin,
                    destination: destination,
                    waypoints: waypoints,
                    travelMode: "DRIVING"
                };
                directionsService.route(request, function(result, status) {
                    "OK" == status && directionsDisplay.setDirections(result);
                });
            }(), $scope.displayLodgingDetails = function() {
                modals.open("travel-lodging-details-modal", {
                    app: $scope.reviewApp
                }, !0);
            }, $scope.displayMealDetails = function() {
                modals.open("travel-meal-details-modal", {
                    app: $scope.reviewApp
                }, !0);
            }, $scope.displayMileageDetails = function() {
                modals.open("travel-mileage-details-modal", {
                    app: $scope.reviewApp
                }, !0);
            }, $scope.submitConfirmModal = function() {
                modals.open("submit-confirm").then(function() {
                    $scope.reviewCallback($scope.ACTIONS.NEXT);
                });
            };
        }
    };
} ]), essTravel.directive("motValidator", function() {
    return {
        require: "ngModel",
        link: function($scope, elm, attrs, ctrl) {
            ctrl.$validators.motValidator = function(modelValue, viewValue) {
                return !modelValue || null != modelValue.methodOfTravel;
            };
        }
    };
});

var travel = angular.module("essTravel");

travel.directive("travelAppPrintBody", [ "appProps", "TravelModeOfTransportationApi", function(appProps, motApi) {
    return {
        restrict: "E",
        scope: {
            app: "="
        },
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-print-body",
        link: function($scope, $elem, $attrs) {
            $scope.NOT_AVAILABLE = "N/A", $scope.tollsAndParking = function() {
                return Number($scope.app.tollsAllowance) + Number($scope.app.parkingAllowance);
            }, $scope.containsMot = function(mot) {
                var appModesOfTransportation = [];
                return $scope.app.route.outboundLegs.forEach(function(leg) {
                    appModesOfTransportation.push(leg.modeOfTransportation.methodOfTravel);
                }), appModesOfTransportation.includes(mot.methodOfTravel);
            }, function() {
                function extractMots(response) {
                    $scope.modeOfTransportations = response.result;
                }
                motApi.get().$promise.then(extractMots).catch($scope.handleErrorResponse);
            }();
        }
    };
} ]);

var essTravel = angular.module("essTravel");

essTravel.controller("TravelApplicationPrintCtrl", [ "$scope", "LocationService", "TravelApplicationApi", "$timeout", "$window", appPrintCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelAddressAutocomplete", [ "appProps", "$q", function(appProps, $q) {
    return {
        require: "ngModel",
        restrict: "A",
        scope: {
            callback: "&",
            leg: "="
        },
        link: function($scope, $elem, $attrs, $ctrl) {
            function parseAddress1(place) {
                return getTypeName(place, "street_number") + " " + getTypeName(place, "route");
            }
            function parseCity(place) {
                var city = getTypeName(place, "locality");
                return null === city ? getTypeName(place, "administrative_area_level_3") : city;
            }
            function parseCounty(place) {
                return getTypeName(place, "administrative_area_level_2");
            }
            function parseState(place) {
                return getTypeName(place, "administrative_area_level_1");
            }
            function parseZip5(place) {
                return getTypeName(place, "postal_code");
            }
            function getTypeName(place, type) {
                for (var i = 0; i < place.address_components.length; i++) {
                    var component = place.address_components[i];
                    if (component.types[0] === type) return component.long_name;
                }
                return "";
            }
            var element = $elem[0], autocomplete = new google.maps.places.Autocomplete(element, {
                types: [ "address" ]
            }), address = {};
            autocomplete.addListener("place_changed", function() {
                var place = autocomplete.getPlace();
                address.formattedAddress = place.formatted_address, address.addr1 = parseAddress1(place), 
                address.city = parseCity(place), address.county = parseCounty(place), address.state = parseState(place), 
                address.zip5 = parseZip5(place), $scope.$apply(function() {
                    $scope.callback({
                        leg: $scope.leg,
                        address: address
                    });
                });
            }), $attrs.address && (element.value = $attrs.address);
        }
    };
} ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelDestinationDirective", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/common/travel-destination-directive",
        scope: {
            destination: "="
        },
        link: function($scope, $elem, $attrs) {}
    };
} ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelInnerContainer", [ function() {
    return {
        restrict: "E",
        scope: {
            title: "@",
            backgroundColorClass: "@?"
        },
        transclude: !0,
        template: '<div class="travel-inner-container"><h2 class="travel-subheader {{backgroundColorClass}}">{{title}}</h2><div class="travel-inner-container-content"><ng-transclude></ng-transclude></div></div>',
        link: function($scope) {
            $scope.backgroundColorClass = angular.isDefined($scope.backgroundColorClass) ? $scope.backgroundColorClass : "travel-background";
        }
    };
} ]);

var essTravel = angular.module("essTravel");

essTravel.controller("TravelManageHistoryController", [ "$scope", historyController ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelHistoryDetailModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/travel-history-detail-modal",
        scope: {},
        controller: "TravelHistoryDetailCtrl"
    };
} ]).controller("TravelHistoryDetailCtrl", [ "$scope", "modals", travelDetailCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.controller("UserConfigCtrl", [ "$scope", "appProps", "ActiveEmployeeApi", "TravelUserConfigApi", "TravelUserConfigSaveApi", "TravelUserConfigDeleteApi", "EmpInfoApi", "modals", userConfigCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.controller("TravelHistoryController", [ "$scope", "appProps", "modals", "TravelApplicationApi", "PaginationModel", historyController ]);
//# sourceMappingURL=ess-travel.min.js.map