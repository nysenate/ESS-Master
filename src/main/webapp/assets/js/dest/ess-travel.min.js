/*! ess - v - 2018-03-26 */
function destSelectionCtrl($scope, modals) {
    function defaultModeOfTransportation() {
        return modals.params().defaultModeOfTransportation;
    }
    function defaultArrivalDate() {
        var date = void 0;
        return modals.params().defaultArrivalDate && (date = moment(modals.params().defaultArrivalDate, ISO_FORMAT).format(DATEPICKER_FORMAT)), 
        date;
    }
    const DATEPICKER_FORMAT = "MM/DD/YYYY", ISO_FORMAT = "YYYY-MM-DD";
    $scope.MODES_OF_TRANSPORTATION = [ "Personal Auto", "Senate Vehicle", "Car Pool", "Train", "Airplane", "Other" ], 
    $scope.destination = {
        address: void 0,
        arrivalDate: void 0,
        departureDate: void 0,
        modeOfTransportation: void 0
    }, $scope.addressCallback = function(address) {
        $scope.$apply(function() {
            $scope.destination.address = address;
        });
    }, $scope.allFieldsEntered = function() {
        return void 0 !== $scope.destination.address && void 0 !== $scope.destination.arrivalDate && void 0 !== $scope.destination.departureDate && void 0 !== $scope.destination.modeOfTransportation;
    }, $scope.submit = function() {
        $scope.destination.arrivalDate = moment($scope.destination.arrivalDate, DATEPICKER_FORMAT).format(ISO_FORMAT), 
        $scope.destination.departureDate = moment($scope.destination.departureDate, DATEPICKER_FORMAT).format(ISO_FORMAT), 
        modals.resolve($scope.destination);
    }, $scope.cancel = function() {
        modals.reject();
    }, $scope.calculateMinToDate = function() {
        var date = void 0;
        return $scope.destination.arrivalDate && (date = $scope.destination.arrivalDate), 
        date;
    }, $scope.init = function() {
        modals.params().destination ? ($scope.destination = modals.params().destination, 
        $scope.destination.arrivalDate = moment($scope.destination.arrivalDate, ISO_FORMAT).format(DATEPICKER_FORMAT), 
        $scope.destination.departureDate = moment($scope.destination.departureDate, ISO_FORMAT).format(DATEPICKER_FORMAT)) : ($scope.destination.modeOfTransportation = defaultModeOfTransportation(), 
        $scope.destination.arrivalDate = defaultArrivalDate());
    }, $scope.init();
}

function lodgingDetailsModalCtrl($scope, modals) {
    function Allowance(date, address, allowance) {
        this.date = date, this.address = address, this.allowance = Number(allowance);
    }
    function createLodgingAllowances() {
        var allowances = [];
        return angular.forEach(accommodations, function(accommodation) {
            angular.forEach(accommodation.stays, function(stay) {
                accommodation.isLodgingRequested && allowances.push(new Allowance(stay.date, accommodation.address, stay.lodgingAllowance));
            });
        }), allowances;
    }
    function removeEmptyAllowances(allowances) {
        return allowances.filter(function(a) {
            return a.allowance > 0;
        });
    }
    function sortByDateAsc(allowances) {
        allowances.sort(function(a, b) {
            return a.date < b.date ? -1 : a.date > b.date ? 1 : 0;
        });
    }
    var accommodations = modals.params().app.accommodations;
    $scope.lodgingAllowances = [], $scope.total = Number(modals.params().app.lodgingAllowance), 
    function() {
        $scope.lodgingAllowances = createLodgingAllowances(), $scope.lodgingAllowances = removeEmptyAllowances($scope.lodgingAllowances), 
        sortByDateAsc($scope.lodgingAllowances);
    }(), $scope.closeModal = function() {
        modals.resolve();
    };
}

function mealDetailsModalCtrl($scope, modals) {
    function Allowance(date, address, allowance) {
        this.date = date, this.address = address, this.allowance = Number(allowance);
    }
    function createMealAllowances() {
        var allowances = [];
        return angular.forEach(accommodations, function(accommodation) {
            angular.forEach(accommodation.stays, function(stay) {
                accommodation.isMealsRequested && allowances.push(new Allowance(stay.date, accommodation.address, stay.mealAllowance));
            });
        }), allowances;
    }
    function removeEmptyAllowances(allowances) {
        return allowances.filter(function(a) {
            return a.allowance > 0;
        });
    }
    function sortByDateAsc(allowances) {
        allowances.sort(function(a, b) {
            return a.date < b.date ? -1 : a.date > b.date ? 1 : 0;
        });
    }
    var accommodations = modals.params().app.accommodations;
    $scope.mealAllowances = [], $scope.total = Number(modals.params().app.mealAllowance), 
    function() {
        $scope.mealAllowances = createMealAllowances(), $scope.mealAllowances = removeEmptyAllowances($scope.mealAllowances), 
        sortByDateAsc($scope.mealAllowances);
    }(), $scope.closeModal = function() {
        modals.resolve();
    };
}

function mileageDetailsModalCtrl($scope, modals) {
    function findQualifyingLegs(legs) {
        var qualifyingLegs = [];
        return angular.forEach(legs, function(leg) {
            leg.qualifies && qualifyingLegs.push(leg);
        }), qualifyingLegs;
    }
    $scope.mileageAllowance = {
        legs: [],
        total: 0,
        rate: 0
    }, function() {
        var route = modals.params().app.route;
        $scope.mileageAllowance.rate = route.mileageRate, $scope.mileageAllowance.total = route.mileageAllowance, 
        $scope.mileageAllowance.legs = findQualifyingLegs(route.outgoingLegs).concat(findQualifyingLegs(route.returnLegs));
    }(), $scope.closeModal = function() {
        modals.resolve();
    };
}

function travelAppController($scope, $q, appProps, modals, locationService, appInitApi, travelApplicationApi) {
    function initApplication(travelerId) {
        appInitApi.save({
            id: travelerId
        }, {}, function(response) {
            $scope.app = response.result;
        });
    }
    function updateStates(action, editField) {
        action === $scope.ACTIONS.CANCEL || (action === $scope.ACTIONS.BACK ? handleBackAction() : action === $scope.ACTIONS.NEXT ? handleNextAction() : action === $scope.ACTIONS.EDIT && handleEditAction(editField));
    }
    function handleBackAction() {
        switch ($scope.appState) {
          case $scope.STATES.PURPOSE:
            break;

          case $scope.STATES.ORIGIN:
            $scope.appState = $scope.STATES.PURPOSE, $scope.pageState = $scope.STATES.PURPOSE;
            break;

          case $scope.STATES.DESTINATION:
            $scope.appState = $scope.STATES.ORIGIN, $scope.pageState = $scope.STATES.ORIGIN;
            break;

          case $scope.STATES.ALLOWANCES:
            $scope.appState = $scope.STATES.DESTINATION, $scope.pageState = $scope.STATES.DESTINATION;
            break;

          case $scope.STATES.REVIEW:
            $scope.appState = $scope.STATES.ALLOWANCES, $scope.pageState = $scope.STATES.ALLOWANCES;
            break;

          case $scope.STATES.EDIT:
            $scope.pageState = $scope.STATES.REVIEW;
        }
    }
    function handleNextAction() {
        switch ($scope.appState) {
          case $scope.STATES.PURPOSE:
            $scope.appState = $scope.STATES.ORIGIN, $scope.pageState = $scope.STATES.ORIGIN;
            break;

          case $scope.STATES.ORIGIN:
            $scope.appState = $scope.STATES.DESTINATION, $scope.pageState = $scope.STATES.DESTINATION;
            break;

          case $scope.STATES.DESTINATION:
            $scope.appState = $scope.STATES.ALLOWANCES, $scope.pageState = $scope.STATES.ALLOWANCES;
            break;

          case $scope.STATES.ALLOWANCES:
            $scope.appState = $scope.STATES.REVIEW, $scope.pageState = $scope.STATES.REVIEW;
            break;

          case $scope.STATES.REVIEW:
            break;

          case $scope.STATES.EDIT:
            $scope.pageState = $scope.STATES.REVIEW;
        }
    }
    function handleEditAction(editField) {
        $scope.appState = $scope.STATES.EDIT, $scope.pageState = editField;
    }
    $scope.ACTIONS = {
        CANCEL: 5,
        BACK: 10,
        NEXT: 15,
        EDIT: 20
    }, $scope.STATES = {
        PURPOSE: 5,
        ORIGIN: 10,
        DESTINATION: 15,
        ALLOWANCES: 25,
        REVIEW: 30,
        EDIT: 35
    }, $scope.pageState = void 0, $scope.appState = void 0, function() {
        $scope.pageState = $scope.STATES.PURPOSE, $scope.appState = $scope.STATES.PURPOSE, 
        initApplication(appProps.user.employeeId);
    }(), $scope.purposeCallback = function(purpose, action) {
        action === $scope.ACTIONS.NEXT && ($scope.app.purposeOfTravel = purpose), updateStates(action);
    }, $scope.originCallback = function(origin, action) {
        action === $scope.ACTIONS.NEXT && ($scope.app.origin = origin), updateStates(action);
    }, $scope.destinationCallback = function(destinations, action) {
        action === $scope.ACTIONS.NEXT && ($scope.app.destinations = destinations), updateStates(action);
    }, $scope.allowancesCallback = function(destinations, allowances, action) {
        action === $scope.ACTIONS.NEXT && ($scope.app.tollsAllowance = allowances.tollsAllowance.toString(), 
        $scope.app.parkingAllowance = allowances.parkingAllowance.toString(), $scope.app.alternateAllowance = allowances.alternateAllowance.toString(), 
        $scope.app.registrationAllowance = allowances.registrationAllowance.toString(), 
        $scope.app.destinations = destinations), updateStates(action);
    }, $scope.reviewCallback = function(action, editField) {
        action === $scope.ACTIONS.NEXT && (modals.open("submit-progress"), travelApplicationApi.save({}, $scope.app).$promise.then(function(response) {
            modals.resolve({});
        }).then(function() {
            modals.open("submit-results").then(function() {
                locationService.go("/travel/application/travel-application", !0);
            });
        })), updateStates(action, editField);
    };
}

function historyController($scope) {
    $scope.test = "Hello angular";
}

function travelDetailCtrl($scope, modals) {
    $scope.requestInfo = modals.params().info, $scope.exit = function() {
        modals.resolve();
    };
}

function userConfigCtrl($scope, appProps, ActiveEmployeeApi, TravelUserConfigApi, TravelUserConfigSaveApi, TravelUserConfigDeleteApi, EmpInfoApi, modals) {
    $scope.dataLoaded = !1, $scope.empId = appProps.user.employeeId, $scope.init = function() {
        $scope.currentGrantee = null, $scope.granteeInfo = {
            selectedGrantee: null,
            startDate: null,
            endDate: null,
            permanent: !1
        }, $scope.grantees = [], ActiveEmployeeApi.get({
            activeOnly: !0
        }, function(resp) {
            resp.success && ($scope.grantees = resp.employees);
        }).$promise.then(function(resp) {
            return ActiveEmployeeApi.get({
                activeOnly: !0
            }, function(resp) {}).$promise;
        }).then(function(resp) {
            return $scope.dataLoaded = !0, ActiveEmployeeApi.get({
                activeOnly: !0
            }, function(resp) {}).$promise;
        }).catch(function(resp) {
            modals.open("500", {
                details: resp
            });
        }), TravelUserConfigApi.get({
            empId: $scope.empId
        }, function(resp) {
            0 != resp.result.requestorId && ($scope.currentGrantee = resp.result, EmpInfoApi.get({
                empId: $scope.currentGrantee.empId
            }, function(resp) {
                if (resp.success) for (var i = 0, length = $scope.grantees.length; i < length; i++) {
                    var grantee = $scope.grantees;
                    if (grantee.fullName == resp.employee.fullName) break;
                }
            }), $scope.granteeInfo.startDate = moment(resp.result.startDate).format("MM/DD/YYYY"), 
            null == resp.result.endDate ? $scope.granteeInfo.permanent = !0 : $scope.granteeInfo.endDate = moment(resp.result.endDate).format("MM/DD/YYYY"));
        }).$promise.then(function(resp) {
            return TravelUserConfigApi.get({
                empId: $scope.empId
            }, function(resp) {}).$promise;
        }).then(function(resp) {
            return TravelUserConfigApi.get({
                empId: $scope.empId
            }, function(resp) {}).$promise;
        }).catch(function(resp) {
            modals.open("500", {
                details: resp
            });
        });
    }, $scope.formNotFilledOut = function() {
        return !($scope.granteeInfo.selectedGrantee && $scope.granteeInfo.startDate && ($scope.granteeInfo.permanent || $scope.granteeInfo.endDate));
    }, $scope.deleteRequester = function() {
        TravelUserConfigDeleteApi.save({
            empId: $scope.empId
        }, {}, function(resp) {});
    }, $scope.saveGrants = function() {
        var params = {
            empId: $scope.empId,
            requestorId: $scope.granteeInfo.selectedGrantee.empId,
            startDate: $scope.granteeInfo.startDate,
            endDate: $scope.granteeInfo.endDate
        };
        TravelUserConfigSaveApi.save(params, {}, function(resp) {}, function(resp) {
            modals.open("500", {
                details: resp
            });
        });
    }, $scope.setPermanent = function() {
        $scope.granteeInfo.permanent ? ($scope.granteeInfo.startDate = moment().format("MM/DD/YYYY"), 
        $scope.granteeInfo.endDate = null) : ($scope.granteeInfo.startDate = null, $scope.granteeInfo.endDate = null);
    }, $scope.setStartDate = function() {
        document.getElementById("grant-start-date").checked ? $scope.granteeInfo.startDate = moment().format("MM/DD/YYYY") : $scope.granteeInfo.startDate = null;
    }, $scope.setEndDate = function() {
        document.getElementById("grant-end-date").checked ? $scope.granteeInfo.endDate = moment().format("MM/DD/YYYY") : $scope.granteeInfo.endDate = null;
    }, $scope.reset = function() {
        $scope.granteeInfo = {
            selectedGrantee: $scope.currentGrantee.empId,
            startDate: null,
            endDate: null,
            permanent: !1
        };
    }, $scope.init();
}

function historyController($scope, appProps, modals, travelApplicationApi) {
    function fetchApplications(empId) {
        function onSuccess(resp) {
            parseResponse(resp), applyFilters(), sort($scope.apps.filtered);
        }
        function onFail(resp) {
            modals.open("500", {
                details: resp
            });
        }
        travelApplicationApi.get({
            empId: empId
        }, onSuccess, onFail);
    }
    function parseResponse(resp) {
        for (var result = resp.result, i = 0; i < result.length; i++) $scope.apps.all.push(result[i]);
    }
    function applyFilters() {
        $scope.apps.filtered = angular.copy($scope.apps.all), $scope.apps.filtered = $scope.apps.filtered.filter(function(app) {
            return Date.parse(app.startDate) >= Date.parse($scope.date.from) && Date.parse(app.startDate) <= Date.parse($scope.date.to);
        });
    }
    function sort(apps) {
        apps.sort(function(a, b) {
            return new Date(b.startDate.date) - new Date(a.startDate.date);
        });
    }
    $scope.apps = {
        all: [],
        filtered: []
    }, $scope.date = {
        from: moment().subtract(1, "month").format("MM/DD/YYYY"),
        to: moment().add(6, "month").format("MM/DD/YYYY")
    }, $scope.init = function() {
        fetchApplications(appProps.user.employeeId);
    }, $scope.viewApplicationDetails = function(requestId) {}, $scope.init();
}

var essTravel = angular.module("essTravel");

essTravel.directive("destinationSelectionModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/modal/destination-selection-modal",
        scope: {},
        controller: "DestinationSelectionModalCtrl"
    };
} ]).controller("DestinationSelectionModalCtrl", [ "$scope", "modals", destSelectionCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelLodgingDetailsModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/modal/travel-lodging-details-modal",
        controller: "LodgingDetailsModalCtrl"
    };
} ]).controller("LodgingDetailsModalCtrl", [ "$scope", "modals", lodgingDetailsModalCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelMealDetailsModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/modal/travel-meal-details-modal",
        controller: "MealDetailsModalCtrl"
    };
} ]).controller("MealDetailsModalCtrl", [ "$scope", "modals", mealDetailsModalCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelMileageDetailsModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/modal/travel-mileage-details-modal",
        controller: "MileageDetailsModalCtrl"
    };
} ]).controller("MileageDetailsModalCtrl", [ "$scope", "modals", mileageDetailsModalCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.controller("NewTravelApplicationCtrl", [ "$scope", "$q", "appProps", "modals", "LocationService", "TravelApplicationInitApi", "TravelApplicationApi", travelAppController ]), 
essTravel.directive("travelApplicationPurpose", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-purpose",
        scope: !0,
        link: function($scope, $elem, $attrs) {
            $scope.purposeOfTravel = angular.copy($scope.app.purposeOfTravel);
        }
    };
} ]), essTravel.directive("travelApplicationOrigin", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-origin",
        scope: !0,
        link: function($scope, $elem, $attrs) {
            $scope.origin = angular.copy($scope.app.origin), $scope.setOrigin = function(address) {
                $scope.origin = address;
            };
        }
    };
} ]), essTravel.directive("travelApplicationDestination", [ "appProps", "modals", function(appProps, modals) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-destination",
        scope: !0,
        link: function($scope, $elem, $attrs) {
            $scope.destinations = angular.copy($scope.app.destinations), $scope.editDestination = function(dest) {
                modals.open("destination-selection-modal", {
                    destination: dest
                }).then(function(destination) {
                    dest = destination;
                });
            }, $scope.removeDestination = function(dest) {
                var index = $scope.destinations.indexOf(dest);
                $scope.destinations.splice(index, 1);
            }, $scope.addDestination = function() {
                var params = {
                    defaultModeOfTransportation: void 0,
                    defaultArrivalDate: void 0
                };
                $scope.destinations.length > 0 && (params.defaultModeOfTransportation = $scope.destinations[$scope.destinations.length - 1].modeOfTransportation, 
                params.defaultArrivalDate = $scope.destinations[$scope.destinations.length - 1].departureDate), 
                modals.open("destination-selection-modal", params).then(function(destination) {
                    $scope.destinations.push(destination);
                });
            };
        }
    };
} ]), essTravel.directive("travelApplicationAllowances", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-allowances",
        scope: !0,
        link: function($scope, $elem, $attrs) {
            $scope.allowances = {
                tollsAllowance: Number(angular.copy($scope.app.tollsAllowance)),
                parkingAllowance: Number(angular.copy($scope.app.parkingAllowance)),
                alternateAllowance: Number(angular.copy($scope.app.alternateAllowance)),
                registrationAllowance: Number(angular.copy($scope.app.registrationAllowance))
            }, $scope.destinations = angular.copy($scope.app.destinations), $scope.destinations.forEach(function(dest) {
                if (void 0 === dest.isMileageRequested && "Personal Auto" === dest.modeOfTransportation && (dest.isMileageRequested = !0), 
                void 0 === dest.isMealsRequested && (dest.isMealsRequested = !0), void 0 === dest.isLodgingRequested) {
                    var arrival = moment(dest.arrivalDate), departure = moment(dest.departureDate);
                    Math.abs(arrival.diff(departure, "days")) > 0 && (dest.isLodgingRequested = !0);
                }
            });
        }
    };
} ]), essTravel.directive("travelApplicationReview", [ "appProps", "$q", "modals", "TravelApplicationApi", function(appProps, $q, modals, appApi) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/application/travel-application-review",
        scope: !0,
        link: function($scope, $elem, $attrs) {
            function displayMap() {
                var map, directionsDisplay = new google.maps.DirectionsRenderer(), directionsService = new google.maps.DirectionsService(), albany = new google.maps.LatLng(42.6680631, -73.8807209), mapOptions = {
                    zoom: 9,
                    center: albany
                };
                map = new google.maps.Map(document.getElementById("map"), mapOptions), directionsDisplay.setMap(map);
                var destinations = $scope.reviewApp.destinations, origin = $scope.reviewApp.origin.formattedAddress, waypoints = [];
                angular.forEach(destinations, function(dest, index) {
                    waypoints.push({
                        location: dest.address.formattedAddress
                    });
                });
                var destination = waypoints.pop().location, request = {
                    origin: origin,
                    destination: destination,
                    waypoints: waypoints,
                    travelMode: "DRIVING"
                };
                directionsService.route(request, function(result, status) {
                    "OK" == status && directionsDisplay.setDirections(result);
                });
            }
            modals.open("review-progress"), $scope.reviewApp = angular.copy($scope.app), appApi.save({}, $scope.reviewApp, function(response) {
                modals.resolve({}), $scope.reviewApp = response.result, displayMap();
            }), $scope.displayLodgingDetails = function() {
                modals.open("travel-lodging-details-modal", {
                    app: $scope.reviewApp
                }, !0);
            }, $scope.displayMealDetails = function() {
                modals.open("travel-meal-details-modal", {
                    app: $scope.reviewApp
                }, !0);
            }, $scope.displayMileageDetails = function() {
                modals.open("travel-mileage-details-modal", {
                    app: $scope.reviewApp
                }, !0);
            };
        }
    };
} ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelAddressAutocomplete", [ "appProps", function(appProps) {
    return {
        restrict: "A",
        scope: {
            callback: "&",
            address: "@"
        },
        link: function($scope, $elem, $attrs) {
            function parseAddress1(place) {
                return getTypeName(place, "street_number") + " " + getTypeName(place, "route");
            }
            function parseCity(place) {
                var city = getTypeName(place, "locality");
                return null === city ? getTypeName(place, "administrative_area_level_3") : city;
            }
            function parseState(place) {
                return getTypeName(place, "administrative_area_level_1");
            }
            function parseZip5(place) {
                return getTypeName(place, "postal_code");
            }
            function getTypeName(place, type) {
                for (var i = 0; i < place.address_components.length; i++) {
                    var component = place.address_components[i];
                    if (component.types[0] === type) return component.long_name;
                }
                return "";
            }
            var element = $elem[0], autocomplete = new google.maps.places.Autocomplete(element, {
                types: [ "address" ]
            });
            autocomplete.addListener("place_changed", function() {
                var address = {}, place = autocomplete.getPlace();
                address.formattedAddress = place.formatted_address, address.addr1 = parseAddress1(place), 
                address.city = parseCity(place), address.state = parseState(place), address.zip5 = parseZip5(place), 
                $scope.callback({
                    address: address
                });
            }), $attrs.address && (element.value = $attrs.address);
        }
    };
} ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelDestinationDirective", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/common/travel-destination-directive",
        scope: {
            destination: "="
        },
        link: function($scope, $elem, $attrs) {}
    };
} ]);

var essTravel = angular.module("essTravel");

essTravel.controller("TravelManageHistoryController", [ "$scope", historyController ]);

var essTravel = angular.module("essTravel");

essTravel.directive("travelHistoryDetailModal", [ "appProps", function(appProps) {
    return {
        templateUrl: appProps.ctxPath + "/template/travel/travel-history-detail-modal",
        scope: {},
        controller: "TravelHistoryDetailCtrl"
    };
} ]).controller("TravelHistoryDetailCtrl", [ "$scope", "modals", travelDetailCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.controller("UserConfigCtrl", [ "$scope", "appProps", "ActiveEmployeeApi", "TravelUserConfigApi", "TravelUserConfigSaveApi", "TravelUserConfigDeleteApi", "EmpInfoApi", "modals", userConfigCtrl ]);

var essTravel = angular.module("essTravel");

essTravel.controller("TravelHistoryController", [ "$scope", "appProps", "modals", "TravelApplicationApi", "PaginationModel", historyController ]);
//# sourceMappingURL=ess-travel.min.js.map