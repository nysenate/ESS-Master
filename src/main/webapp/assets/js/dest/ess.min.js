/*! ess - v - 2017-01-31 */
function progressModal() {
    function link($scope, $elem, $attrs) {
        $scope.title = $attrs.title;
    }
    return {
        template: '<div class="progress-modal"><h3 class="content-info" ng-bind="title"></h3><div loader-indicator class="loader"></div></div>',
        link: link
    };
}

function confirmModal(modals) {
    function link($scope, $elem, $attrs) {
        $scope.resolve = modals.resolve, $scope.reject = modals.reject, $scope.rejectable = "true" === $attrs.rejectable, 
        $scope.title = $attrs.title, $scope.confirmMessage = $attrs.confirmMessage, $scope.resolveButton = $attrs.resolveButton, 
        $scope.rejectButton = $attrs.rejectButton, $scope.resolveClass = $attrs.resolveClass || "submit-button", 
        $scope.rejectClass = $attrs.rejectClass || "reject-button", $scope.confirmClass = $attrs.confirmClass || "time-neutral-button";
    }
    return {
        template: '<div class="confirm-modal"><h3 class="content-info" ng-bind="title"></h3><div class="confirmation-message"><h4 ng-show="confirmMessage" ng-bind="confirmMessage"></h4><div ng-hide="rejectable" class="input-container"><input type="button" ng-click="resolve()" class="{{confirmClass}}"value="{{resolveButton || \'OK\'}}" tabindex="1"/></div><div ng-show="rejectable" class="input-container"><input type="button" ng-click="resolve()" class="{{resolveClass}}"value="{{resolveButton || \'Yes\'}}" tabindex="1"/><input type="button" ng-click="reject()" class="{{rejectClass}}"value="{{rejectButton || \'No\'}}" tabindex="1"/></div></div></div>',
        link: link
    };
}

function debounceFactory($timeout) {
    return function(func, wait, immediate) {
        var promise;
        return function() {
            function deferred() {
                promise = null, immediate || func.apply(ctx, args);
            }
            var ctx = this, args = arguments, callNow = immediate && !promise;
            $timeout.cancel(promise), promise = $timeout(deferred, wait), callNow && func.apply(ctx, args);
        };
    };
}

function locationService($location, $window, $anchorScroll, appProps) {
    function setSearchParam(paramName, paramValue, condition, replace) {
        var search = $location.search(paramName, condition !== !1 ? paramValue : null);
        replace !== !1 && search.replace();
    }
    function getSearchParam(paramName) {
        return $location.search()[paramName];
    }
    function clearSearchParams() {
        $location.search({});
    }
    function scrollToId(id) {
        $location.hash(id), $anchorScroll();
    }
    function go(path, reload, params) {
        $location.path(appProps.ctxPath + path).search(params ? params : {}), reload === !0 && setTimeout(function() {
            $window.location.reload();
        }, 0);
    }
    return {
        setSearchParam: setSearchParam,
        getSearchParam: getSearchParam,
        clearSearchParams: clearSearchParams,
        scrollToId: scrollToId,
        go: go
    };
}

function modalDirective(modals) {
    return {
        scope: {
            modalId: "@"
        },
        transclude: !0,
        template: '<div class="modal" ng-if="isOpen()" ng-class="{\'background-modal\': !isTop()}">  <ng-transclude></ng-transclude></div>',
        link: function($scope) {
            $scope.isOpen = function() {
                return modals.isOpen($scope.modalId);
            }, $scope.isTop = function() {
                return modals.isTop($scope.modalId);
            };
        }
    };
}

function promiseUtilsService($q) {
    function serial(tasks) {
        var prevPromise = $q.when();
        return angular.forEach(tasks, function(task) {
            prevPromise = prevPromise ? prevPromise.then(task) : task();
        }), prevPromise;
    }
    return {
        serial: serial
    };
}

function zeroPadFilter() {
    return zeroPad;
}

function zeroPad(number, length) {
    var numberString = "" + number;
    return numberString.length > length ? numberString : (Math.pow(10, length) + "" + numberString).slice(-length);
}

function essStorageService($window, appProps) {
    var userId = appProps.user.employeeId, keyPrefix = "nysenate.gov-" + userId + "-";
    return {
        save: function(key, value) {
            $window.localStorage.setItem(keyPrefix + key, JSON.stringify(value));
        },
        load: function(key) {
            return JSON.parse($window.localStorage.getItem(keyPrefix + key));
        },
        remove: function(key) {
            $window.localStorage.removeItem(keyPrefix + key);
        }
    };
}

function errorModalTestCtrl($scope, modals) {
    $scope.testData = {
        explanation: "This is a test of the error reporting system",
        someField: "this field would normally contain error data",
        obj: {
            anotherField: "Hi mom",
            yetAnotherField: 3
        }
    }, modals.open("500", {
        action: "test error modal",
        details: $scope.testData
    });
}

var essCore = angular.module("essCore", [ "ngCookies" ]), essApi = angular.module("essApi", [ "essCore" ]), essMyInfo = angular.module("essMyInfo", [ "essApi" ]), essTime = angular.module("essTime", [ "essApi" ]), essSupply = angular.module("essSupply", [ "essApi", "ngCookies" ]), essHelp = angular.module("essHelp", [ "essApi" ]), essApp = angular.module("ess", [ "ngRoute", "ngResource", "ngAnimate", "essCore", "essMyInfo", "essTime", "essSupply", "essHelp", "floatThead", "angularUtils.directives.dirPagination", "ui.autocomplete", "nsPopover" ]);

essCore.constant("appProps", globalProps), essCore.run([ "$cookies", function($cookies) {
    if (void 0 === $cookies.get("appVersion") || $cookies.get("appVersion") != globalProps.releaseVersion) {
        var cookies = $cookies.getAll();
        angular.forEach(cookies, function(v, k) {
            $cookies.remove(k);
        });
    }
    $cookies.put("appVersion", globalProps.releaseVersion);
} ]), essCore.run(function() {
    $(document).unbind("keydown").bind("keydown", function(event) {
        var doPrevent = !1;
        if (8 === event.keyCode) {
            var d = event.srcElement || event.target;
            doPrevent = ("INPUT" !== d.tagName.toUpperCase() || "TEXT" !== d.type.toUpperCase() && "PASSWORD" !== d.type.toUpperCase() && "FILE" !== d.type.toUpperCase() && "SEARCH" !== d.type.toUpperCase() && "EMAIL" !== d.type.toUpperCase() && "NUMBER" !== d.type.toUpperCase() && "DATE" !== d.type.toUpperCase()) && "TEXTAREA" !== d.tagName.toUpperCase() || (d.readOnly || d.disabled);
        }
        doPrevent && event.preventDefault();
    });
}), essCore.config([ "$httpProvider", function($httpProvider) {
    $httpProvider.interceptors.push("httpTimeoutChecker");
} ]), essCore.config([ "$routeProvider", "$httpProvider", function($routeProvider, $httpProvider) {
    $httpProvider.defaults.headers.common["Cache-Control"] = "no-cache, no-store, max-age=0, must-revalidate", 
    $httpProvider.defaults.headers.common.Pragma = "no-cache", $httpProvider.defaults.headers.common.Expires = "-1";
} ]);

var essApi = angular.module("essApi");

essApi.factory("PayPeriodApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/periods/:periodType");
} ]), essApi.factory("HolidayApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/holidays");
} ]), essApi.factory("TimeRecordApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/timerecords");
} ]), essApi.factory("ActiveTimeRecordsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/timerecords/active");
} ]), essApi.factory("ActiveYearsTimeRecordsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/timerecords/activeYears");
} ]), essApi.factory("SupervisorTimeRecordsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/timerecords/supervisor");
} ]), essApi.factory("SupervisorTimeRecordCountsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/timerecords/supervisor/count");
} ]), essApi.factory("TimeRecordReminderApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/timerecords/reminder");
} ]), essApi.factory("TimeRecordCreationApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/timerecords/next");
} ]), essApi.factory("AttendanceRecordApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/attendance/records");
} ]), essApi.factory("SupervisorEmployeesApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supervisor/employees");
} ]), essApi.factory("SupervisorChainApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supervisor/chain");
} ]), essApi.factory("SupervisorOverridesApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supervisor/overrides");
} ]), essApi.factory("SupervisorGrantsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supervisor/grants");
} ]), essApi.factory("AccrualPeriodApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/accruals");
} ]), essApi.factory("AccrualHistoryApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/accruals/history");
} ]), essApi.factory("EmpInfoApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/employees.json");
} ]), essApi.factory("EmpActiveYearsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/employees/activeDates");
} ]), essApi.factory("EmpActiveYearsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/employees/activeYears");
} ]), essApi.factory("EmpTransactionsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/empTransactions/");
} ]), essApi.factory("EmpTransactionSnapshotApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/empTransactions/snapshot");
} ]), essApi.factory("EmpTransactionCurrentSnapshotApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/empTransactions/snapshot/current");
} ]), essApi.factory("EmpTransactionTimelineApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/empTransactions/timeline");
} ]), essApi.factory("AllowanceApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/allowances");
} ]), essApi.factory("MiscLeaveGrantApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/miscleave/grants");
} ]), essApi.factory("EmpCheckHistoryApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/paychecks.json");
} ]), essApi.factory("LocationApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/locations.json");
} ]), essApi.factory("SupplyDestinationApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supply/destinations/:empId.json", {
        empId: "@empId"
    });
} ]), essApi.factory("SupplyRequisitionApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supply/requisitions.json");
} ]), essApi.factory("SupplyRequisitionByIdApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supply/requisitions/:id.json", {
        id: "@id"
    });
} ]), essApi.factory("SupplyRequisitionHistoryApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supply/requisitions/history/:id.json", {
        id: "@id"
    });
} ]), essApi.factory("SupplyRequisitionOrderHistoryApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supply/requisitions/orderHistory.json");
} ]), essApi.factory("SupplyReconciliationApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supply/reconciliation.json");
} ]), essApi.factory("SupplyEmployeesApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supply/employees");
} ]), essApi.factory("SupplyLocationStatisticsApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/supply/statistics/locations.json");
} ]), essApi.factory("TimeoutApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/timeout/ping.json");
} ]), essApi.factory("ErrorReportApi", [ "$resource", "appProps", function($resource, appProps) {
    return $resource(appProps.apiPath + "/report/error.json");
} ]);

var essApp = angular.module("ess");

essApp.directive("essNavigation", [ "$route", "$routeParams", "$location", function($route, $routeParams, $location) {
    return {
        restrict: "A",
        link: function(scope, element, attrs) {
            element.on("click", "ul li.main-topic", function(event) {
                $(this).hasClass("active") || (element.find(".main-topic.active").removeClass("active"), 
                element.find(".sub-topic-list.active").removeClass("active"), $(this).addClass("active"), 
                $(this).next("li").children("ul.sub-topic-list").addClass("active"));
            }), scope.$on("$routeChangeStart", function() {
                element.find(".main-topic.active, .sub-topic-list.active, .sub-topic.active").removeClass("active");
                var $a = element.find(".sub-topic a[href='" + $location.$$path + "']");
                if (1 == $a.length) {
                    var $subTopicLi = $a.parent(), $subTopicUl = $subTopicLi.parent(), $mainTopic = $subTopicUl.parent().prev();
                    $subTopicLi.add($subTopicUl).add($mainTopic).addClass("active");
                }
            });
        }
    };
} ]);

var essApp = angular.module("ess");

essApp.config(function($routeProvider, $locationProvider) {
    var ctxPath = globalProps.ctxPath;
    $routeProvider.when(ctxPath + "/myinfo", {
        redirectTo: ctxPath + "/myinfo/personnel/summary"
    }), $routeProvider.when(ctxPath + "/myinfo/personnel/summary", {
        templateUrl: ctxPath + "/template/myinfo/personnel/summary"
    }), $routeProvider.when(ctxPath + "/myinfo/personnel/transactions", {
        templateUrl: ctxPath + "/template/myinfo/personnel/transactions"
    }), $routeProvider.when(ctxPath + "/myinfo/payroll/checkhistory", {
        templateUrl: ctxPath + "/template/myinfo/payroll/checkhistory"
    }), $routeProvider.when(ctxPath + "/time", {
        redirectTo: ctxPath + "/time/record/entry"
    }), $routeProvider.when(ctxPath + "/time/record/entry", {
        templateUrl: ctxPath + "/template/time/record/entry",
        reloadOnSearch: !1
    }), $routeProvider.when(ctxPath + "/time/record/entry/papertimesheet", {
        templateUrl: ctxPath + "/template/time/record/record-paper-entry",
        reloadOnSearch: !1
    }), $routeProvider.when(ctxPath + "/time/record/history", {
        templateUrl: ctxPath + "/template/time/record/history"
    }), $routeProvider.when(ctxPath + "/time/record/emphistory", {
        templateUrl: ctxPath + "/template/time/record/emp-history"
    }), $routeProvider.when(ctxPath + "/time/record/manage", {
        templateUrl: ctxPath + "/template/time/record/manage",
        reloadOnSearch: !1
    }), $routeProvider.when(ctxPath + "/time/record/grant", {
        templateUrl: ctxPath + "/template/time/record/grant"
    }), $routeProvider.when(ctxPath + "/time/period/calendar", {
        templateUrl: ctxPath + "/template/time/period/calendar"
    }), $routeProvider.when(ctxPath + "/time/accrual/history", {
        templateUrl: ctxPath + "/template/time/accrual/history",
        reloadOnSearch: !1
    }), $routeProvider.when(ctxPath + "/time/accrual/projections", {
        templateUrl: ctxPath + "/template/time/accrual/projections"
    }), $routeProvider.when(ctxPath + "/time/test/errormodal", {
        templateUrl: ctxPath + "/template/time/test/error-modal-test"
    }), $routeProvider.when(ctxPath + "/supply", {
        redirectTo: ctxPath + "/supply/order"
    }), $routeProvider.when(ctxPath + "/supply/order", {
        templateUrl: ctxPath + "/template/supply/order",
        reloadOnSearch: !1
    }), $routeProvider.when(ctxPath + "/supply/order/cart", {
        templateUrl: ctxPath + "/template/supply/order/cart"
    }), $routeProvider.when(ctxPath + "/supply/manage/fulfillment", {
        templateUrl: ctxPath + "/template/supply/manage/fulfillment",
        resolve: {
            locAutocomplete: [ "SupplyLocationAutocompleteService", function(locAutoService) {
                return locAutoService.initWithAllLocations();
            } ]
        }
    }), $routeProvider.when(ctxPath + "/supply/manage/reconciliation", {
        templateUrl: ctxPath + "/template/supply/manage/reconciliation"
    }), $routeProvider.when(ctxPath + "/supply/history/history", {
        templateUrl: ctxPath + "/template/supply/history/history"
    }), $routeProvider.when(ctxPath + "/supply/order-history", {
        templateUrl: ctxPath + "/template/supply/order-history"
    }), $routeProvider.when(ctxPath + "/supply/requisition/requisition-view", {
        templateUrl: ctxPath + "/template/supply/requisition/requisition-view"
    }), $routeProvider.when(ctxPath + "/help/ta/plan", {
        templateUrl: ctxPath + "/template/help/ta/plan"
    }), $routeProvider.when(ctxPath + "/logout", {}), $routeProvider.otherwise({
        templateUrl: ctxPath + "/template/404"
    }), $locationProvider.html5Mode(!0), $locationProvider.hashPrefix("!");
}), essApp.animation(".view-animate", function() {
    return {
        enter: function(element, done) {
            return element.hide(), element.delay(150).fadeIn(300, done), function() {
                element.stop();
            };
        },
        leave: function(element, done) {
            return element.fadeOut(100, done), function() {
                element.stop();
            };
        }
    };
});

var essApp = angular.module("ess");

essApp.controller("MainCtrl", [ "$scope", "$http", "$route", "$routeParams", "$location", function($scope, $http, $route, $routeParams, $location) {
    $scope.$route = $route, $scope.$location = $location, $scope.$routeParams = $routeParams;
} ]);

var essApp = angular.module("ess");

essApp.filter("activeInactive", function() {
    return function(input) {
        return "A" === input || "a" === input ? "Active" : "Inactive";
    };
});

var essApp = angular.module("ess");

essApp.directive("badge", [ "$rootScope", "badgeService", function($rootScope, badgeService) {
    return {
        restrict: "AE",
        scope: {
            badgeId: "&",
            hideEmpty: "&"
        },
        template: '<div class="badge" ng-if="!hideEmpty || badgeValue">{{badgeValue}}</div>',
        link: function($scope, element, attrs) {
            $scope.$watch(function() {
                return badgeService.badges[attrs.badgeId];
            }, function(newVal) {
                $scope.badgeValue = newVal;
            });
        }
    };
} ]);

var essApp = angular.module("ess");

essApp.factory("badgeService", [ "appProps", function(appProps) {
    var badgeService = {
        badges: {}
    };
    return badgeService.setBadgeValue = function(badgeId, value) {
        badgeService.badges[badgeId] = value;
    }, badgeService;
} ]), angular.module("ess").directive("progressModal", [ progressModal ]).directive("confirmModal", [ "modals", confirmModal ]);

var essApp = angular.module("ess");

essApp.directive("datepicker", [ function() {
    return {
        restrict: "AE",
        scope: {
            stepMonths: "@",
            inline: "@",
            defaultDate: "@",
            beforeShowDay: "&?",
            fromDate: "=?",
            toDate: "=?"
        },
        link: function($scope, $element, $attrs) {
            function validDay(date) {
                return $scope.fromDate ? !moment($scope.fromDate).isAfter(date) : !$scope.toDate || !moment($scope.toDate).isBefore(date);
            }
            function beforeShowDay(date) {
                var beforeShowDayResult = [ !0 ];
                return "function" == typeof customBeforeShowDay && (beforeShowDayResult = customBeforeShowDay(date)), 
                beforeShowDayResult[0] = beforeShowDayResult[0] && validDay(date), beforeShowDayResult;
            }
            var defaultDate = $scope.defaultDate ? $scope.defaultDate : new Date(), customBeforeShowDay = void 0;
            "function" == typeof $scope.beforeShowDay && (customBeforeShowDay = $scope.beforeShowDay()), 
            $element.datepicker({
                showOn: "button",
                buttonImage: "/assets/img/calendar.png",
                buttonImageOnly: !0,
                inline: $scope.inline || !1,
                stepMonths: $scope.stepMonths || 1,
                defaultDate: defaultDate,
                beforeShowDay: beforeShowDay
            }), "false" === $scope.stepMonths && $element.find(".ui-datepicker-prev, .ui-datepicker-next").remove();
        }
    };
} ]), angular.module("ess").factory("debounce", [ "$timeout", debounceFactory ]), 
angular.module("ess").directive("errSrc", function() {
    return {
        link: function(scope, element, attrs) {
            element.bind("error", function() {
                attrs.src != attrs.errSrc && attrs.$set("src", attrs.errSrc);
            });
        }
    };
});

var essApp = angular.module("ess");

essApp.directive("essNotification", [ function() {
    return {
        restrict: "AE",
        scope: {
            level: "@",
            title: "@",
            message: "@",
            dialog: "@",
            dialogShow: "@"
        },
        transclude: !0,
        template: '<div class="ess-notification {{level}}"><h2 ng-if="title" ng-bind="title"></h2><p ng-if="message" ng-bind="message"></p><ng-transclude></ng-transclude></div>',
        link: function(scope, element, attrs) {
            "true" === scope.dialog && ($elem = jQuery(element), $elem && $elem.dialog({
                autoOpen: !1,
                height: "auto",
                width: "auto",
                modal: !0
            }), scope.$watch("dialogShow", function(newVal, oldVal) {
                "true" === newVal && $elem.dialog("open");
            }));
        }
    };
} ]);

var essApp = angular.module("ess");

essApp.directive("internalErrorModal", [ "modals", "ErrorReportApi", "appProps", function(modals, errorReportApi, appProps) {
    return {
        template: '<section id="internal-error-modal" title="Internal Error"><h1>Internal Error</h1><p class="internal-error-text">We are sorry to report that an error occurred on the ESS server while processing your request.<br/>Please contact the STS Helpline at (518) 455-2011 and notify us of this issue so that we can fix it!</p><pre class="internal-error-details" ng-show="showDetails">{{details | json}}</pre><p style="color: red" ng-show="showFailure">Sorry, your report cannot be sent.  Please contact the STS Helpline at (518) 455-2011.</p><div ng-show="sendingReport"><h3 class="loading-text">Sending Error Report ...</h3><div loader-indicator class="sm-loader"></div></div><div class="button-container"><input type="button" class="reject-button" value="{{showDetails ? \'Hide\' : \'Show\'}} Details"ng-click="showDetails = !showDetails" /><input type="button" class="reject-button" value="Report Error"ng-click="report()" ng-disabled="sendingReport" /><input type="button" class="reject-button" value="OK"ng-click="close()" ng-disabled="sendingReport" /></div></section>',
        link: function($scope, $element, $attrs) {
            $scope.showDetails = !1, $scope.showFailure = !1, $scope.sendingReport = !1, $scope.details = modals.params().details, 
            $scope.report = function() {
                var params = {
                    user: appProps.user.employeeId,
                    url: window.location.href,
                    details: $scope.details
                };
                $scope.sendingReport = !0, errorReportApi.save(params, function(resp) {
                    modals.resolve();
                }, function(resp) {
                    $scope.showFailure = !0;
                }).$promise.finally(function() {
                    $scope.sendingReport = !1;
                });
            }, $scope.close = modals.reject;
        }
    };
} ]);

var essApp = angular.module("ess");

essApp.directive("loaderIndicator", [ function() {
    return {
        restrict: "A",
        template: '<div class="dot dot1"></div><div class="dot dot2"></div><div class="dot dot3"></div><div class="dot dot4"></div>',
        link: function(scope, element, attrs) {}
    };
} ]), angular.module("ess").service("LocationService", [ "$location", "$window", "$anchorScroll", "appProps", locationService ]);

var essApp = angular.module("ess");

essApp.directive("modalContainer", [ "$rootScope", "$document", "modals", function($rootScope, $document, modals) {
    function link($scope, $element, $attrs, $ctrl, $transclude) {
        function onModalUpdate() {
            $scope.isOpen() ? lockScrollbar() : unlockScrollbar();
        }
        function lockScrollbar() {
            var rootEle = angular.element("html");
            rootEle.addClass("overflow-hidden");
        }
        function unlockScrollbar() {
            var rootEle = angular.element("html");
            rootEle.removeClass("overflow-hidden");
        }
        var backDropEle = $element.find("#modal-backdrop")[0];
        backDropEle.onclick = function(event) {
            backDropEle === event.target && $scope.$apply(modals.softReject);
        }, $document.bind("keyup", function(event) {
            27 === event.keyCode && $scope.$apply(modals.softReject);
        }), $rootScope.$on("modals.open", function(event, modalId) {
            onModalUpdate();
        }), $rootScope.$on("modals.close", function(event) {
            onModalUpdate();
        }), $scope.isOpen = function() {
            return modals.isOpen();
        };
    }
    return {
        template: '<div id="modal-container" ng-show="isOpen()">  <div id="modal-backdrop"></div>  <div id="common-modals">    <modal modal-id="500"><div internal-error-modal></div></modal>    <modal modal-id="timeout"><div timeout-modal></div></modal>  </div>  <ng-transclude id="custom-modals"></ng-transclude>  <div id="modal-display"></div></div>',
        transclude: !0,
        link: link
    };
} ]), essApp.directive("modal", [ "modals", modalDirective ]);

var essApp = angular.module("ess");

essApp.service("modals", [ "$rootScope", "$q", function($rootScope, $q) {
    function open(modalId, params, softRejectable) {
        if (!modalId) return $q.defer();
        var modal = {
            modalId: modalId,
            deferred: $q.defer(),
            params: params,
            softRejectable: softRejectable === !0
        };
        return modals.unshift(modal), $rootScope.$emit("modals.open", modalId), modal.deferred.promise;
    }
    function isOpen(modalId) {
        if (void 0 === modalId) return modals.length > 0;
        var found = !1;
        return angular.forEach(modals, function(modal) {
            modal.modalId === modalId && (found = !0);
        }), found;
    }
    function isTop(modalId) {
        return modals.length > 0 && modals[0].modalId === modalId;
    }
    function params() {
        var modal = modals[0];
        return modal ? modal.params || {} : {};
    }
    function reject(reason) {
        var modal = modals.shift();
        modal && (modal.deferred.reject(reason), $rootScope.$emit("modals.close"));
    }
    function rejectAll(reason) {
        for (;modals.length > 0; ) reject(reason);
    }
    function softReject(reason) {
        var modal = modals[0];
        modal && modal.softRejectable && reject(reason);
    }
    function resolve(response) {
        var modal = modals.shift();
        modal && (modal.deferred.resolve(response), $rootScope.$emit("modals.close"));
    }
    var modals = [];
    return {
        open: open,
        isOpen: isOpen,
        isTop: isTop,
        params: params,
        reject: reject,
        rejectAll: rejectAll,
        softReject: softReject,
        resolve: resolve
    };
} ]);

var essApp = angular.module("ess");

essApp.filter("moment", [ "$filter", function($filter) {
    return function(input, format, defaultVal) {
        return input ? moment(input).format(format) : "undefined" != typeof defaultVal ? defaultVal : "--";
    };
} ]), essApp.filter("momentFromNow", function() {
    return function(input, suffix, defaultVal) {
        return suffix = suffix === !0, input ? moment(input).fromNow(suffix) : "undefined" != typeof defaultVal ? defaultVal : "--";
    };
}), essApp.filter("momentCmp", function() {
    return function(lhs, operator, rhs, precision) {
        switch ("now" === rhs && (rhs = moment()), operator) {
          case "eq":
          case "=":
            return moment(lhs).isSame(rhs, precision);

          case "gt":
          case ">":
            return moment(lhs).isAfter(rhs, precision);

          case "lt":
          case "<":
            return moment(lhs).isBefore(rhs, precision);

          default:
            return !1;
        }
    };
}), essApp.filter("momentIsDOW", function() {
    return function(date, daysOfWeek) {
        return daysOfWeek.constructor !== Array && (daysOfWeek = [ daysOfWeek ]), daysOfWeek.indexOf(moment(date).day()) >= 0;
    };
});

var essApp = angular.module("ess");

essApp.filter("not", function() {
    return function(input) {
        return !input;
    };
});

var essApp = angular.module("ess");

essApp.directive("odometer", [ function() {
    return {
        restrict: "AE",
        scope: {
            duration: "=odometerDuration",
            format: "=odometerFormat",
            value: "@value"
        },
        link: function($scope, element, attrs) {
            var od = new Odometer({
                el: element[0],
                value: $scope.value || 0,
                animation: "count",
                duration: $scope.duration || 500,
                format: $scope.format || "(,ddd).dd"
            });
            attrs.$observe("value", function(val) {
                od.update(val);
            });
        }
    };
} ]);

var essApp = angular.module("ess");

essApp.factory("PaginationModel", function() {
    return {
        firstPage: 1,
        currPage: 1,
        lastPage: 1,
        itemsPerPage: 6,
        totalItems: 0,
        setTotalItems: function(totalResults) {
            this.totalItems = totalResults, this.lastPage = Math.ceil(this.totalItems / this.itemsPerPage), 
            this.currPage > this.lastPage && (this.currPage = 1);
        },
        reset: function() {
            this.currPage = 1;
        },
        needsPagination: function() {
            return this.totalItems > this.itemsPerPage;
        },
        getOffset: function() {
            return this.itemsPerPage * (this.currPage - 1) + 1;
        },
        getLimit: function() {
            return this.itemsPerPage;
        },
        nextPage: function() {
            this.currPage += 1;
        },
        hasNextPage: function() {
            return this.currPage < this.lastPage;
        },
        prevPage: function() {
            this.currPage = Math.max(this.currPage - 1, 0);
        },
        hasPrevPage: function() {
            return this.currPage > this.firstPage;
        },
        toLastPage: function() {
            this.currPage = this.lastPage;
        },
        toFirstPage: function() {
            this.currPage = this.firstPage;
        }
    };
}), angular.module("ess").service("promiseUtils", [ "$q", promiseUtilsService ]);

var essApp = angular.module("ess");

essApp.filter("round", function() {
    return function(number, multiple, direction) {
        multiple = Math.abs(multiple || 1), direction = isNaN(direction) ? 0 : direction;
        var roundingFunction = Math.round;
        direction > 0 ? roundingFunction = Math.ceil : direction < 0 && (roundingFunction = Math.floor);
        var inverse = 1 / multiple;
        return roundingFunction(number * inverse) / inverse;
    };
});

var essApp = angular.module("ess");

essApp.directive("textAutoHeight", [ "$timeout", function($timeout) {
    return {
        restrict: "A",
        scope: {
            text: "="
        },
        link: function($scope, $elem, $attrs) {
            $timeout(function() {
                var minHeight = $elem[0].offsetHeight, paddingLeft = parseInt($elem.css("paddingLeft")) || 0, paddingRight = parseInt($elem.css("paddingRight")) || 0, $shadow = angular.element("<div></div>").css({
                    position: "absolute",
                    top: -1e4,
                    left: -1e4,
                    width: $elem[0].offsetWidth - paddingLeft - paddingRight,
                    fontSize: $elem.css("fontSize"),
                    fontFamily: $elem.css("fontFamily"),
                    lineHeight: $elem.css("lineHeight"),
                    resize: "none"
                });
                $scope.$watch(function() {
                    return $elem[0].offsetWidth;
                }, function(newWidth, oldWidth) {
                    newWidth !== oldWidth && $timeout(function() {
                        var paddingLeft = parseInt($elem.css("paddingLeft")) || 0, paddingRight = parseInt($elem.css("paddingRight")) || 0;
                        $shadow.css("width", newWidth - paddingLeft - paddingRight);
                    }, 50);
                }), angular.element(document.body).append($shadow);
                var update = function() {
                    var times = function(string, number) {
                        for (var i = 0, r = ""; i < number; i++) r += string;
                        return r;
                    }, val = $elem.val().replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&/g, "&amp;").replace(/\n$/, "<br/>&nbsp;").replace(/\n/g, "<br/>").replace(/\s{2,}/g, function(space) {
                        return times("&nbsp;", space.length - 1) + " ";
                    });
                    $shadow.html(val), $elem.css("height", Math.max($shadow[0].offsetHeight + 10, minHeight) + "px");
                };
                $elem.bind("keyup keydown keypress change", update), update();
            }, 100);
        }
    };
} ]), essCore.factory("httpTimeoutChecker", [ "appProps", "modals", "$rootScope", function(appProps, modals, $rootScope) {
    function pingServer() {
        $.ajax({
            type: "GET",
            url: appProps.apiPath + "/timeout/ping.json?idleTime=" + idleTime,
            success: function(data) {
                data.message > 0 && isTimeoutModalOpen === !1 && (modals.open("timeout"), isTimeoutModalOpen = !0, 
                $rootScope.$digest());
            },
            error: function(data) {
                pingTolerance -= 1, pingTolerance < 0 && (window.location.replace(appProps.loginUrl), 
                window.location.reload(!0));
            }
        });
    }
    var isPingInitialized = !1, isTimeoutModalOpen = !1, pingRate = 30, idleTime = 0, pingTolerance = 10;
    return {
        request: function(request) {
            if ("true" == globalProps.timeoutExempt) return request;
            if (!isPingInitialized) {
                var inactivityCheck = setInterval(function() {
                    idleTime += pingRate, pingServer();
                }, 1e3 * pingRate);
                window.onbeforeunload = function() {
                    clearInterval(inactivityCheck);
                }, $(document).on("change click keydown keypress keyup load resize scroll select submit", function() {
                    idleTime = 0;
                }), isPingInitialized = !0;
            }
            return request;
        },
        modalClosed: function() {
            isTimeoutModalOpen = !1;
        }
    };
} ]);

var essApp = angular.module("ess");

essApp.directive("timeoutModal", [ "modals", "httpTimeoutChecker", "$interval", "LocationService", "TimeoutApi", "appProps", function(modals, httpTimeoutChecker, $interval, locationService, timeoutApi, appProps) {
    return {
        template: '<section id="timeout-modal" title="Inactivity Warning"><h1>Inactive Session Timeout</h1><p class="timeout-text">Due to inactivity, you will be logged out in {{timeRemaining}} seconds.<br>Do you want to continue your work?</p><div class="button-container"><input type="button" class="reject-button" ng-click="logout()" value="Log out of ESS"/><input type="button" class="submit-button" ng-click="close()" value="Continue"/></div></section>',
        link: function($scope, $element, $attrs) {
            $scope.timeRemaining = 60;
            var countdown = $interval(function() {
                if ($scope.timeRemaining > 0) $scope.timeRemaining--; else {
                    var params = {
                        idleTime: -1
                    };
                    timeoutApi.get(params, function() {
                        window.location.replace(appProps.loginUrl), window.location.reload(!0);
                    });
                }
            }, 1e3);
            $scope.$on("$destroy", function() {
                $interval.cancel(countdown);
            }), $scope.close = function() {
                modals.reject(), httpTimeoutChecker.modalClosed();
            }, $scope.logout = function() {
                locationService.go("/logout", !0);
            };
        }
    };
} ]);

var essApp = angular.module("ess");

essApp.directive("togglePanel", [ function() {
    return {
        restrict: "E",
        scope: {
            label: "@",
            extraClasses: "@",
            callback: "&",
            renderClosed: "@"
        },
        replace: !0,
        transclude: !0,
        template: '<div class="content-container {{extraClasses}}" ng-class="{\'open\': open}">   <h1 class="toggle-panel-label" ng-click="toggle()">{{label}}</h1>   <div ng-if="opened || renderClosed" ng-show="open" class="panel-content" ng-cloak ng-transclude></div></div>',
        link: function($scope, $element, $attrs) {
            $scope.opened = !1, $scope.toggle = function() {
                $scope.open = !$scope.open, $scope.callback && $scope.callback($scope.open);
            }, $scope.renderClosed = "true" == $scope.renderClosed, $scope.$watch($attrs.open, function(open) {
                $scope.open = open;
            }), $scope.$watch($attrs.showTip, function(showTip) {
                $scope.showTip = showTip;
            }), $scope.$watch("open", function(newOpen, oldOpen) {
                var panelElem = $element.children(".panel-content");
                newOpen ? panelElem.slideDown(200) : panelElem.slideUp(200), $scope.opened = newOpen || $scope.opened;
            });
        }
    };
} ]), angular.module("ess").filter("zeroPad", zeroPadFilter);

var ess = angular.module("ess");

ess.service("EssStorageService", [ "$window", "appProps", essStorageService ]), 
angular.module("ess").controller("ErrorModalTestCtrl", [ "$scope", "modals", errorModalTestCtrl ]);
//# sourceMappingURL=ess.min.js.map